============================= test session starts ==============================
platform darwin -- Python 3.12.11, pytest-8.4.1, pluggy-1.6.0 -- /Users/joshua.moreton/Documents/GitHub/LQQ3/.venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/joshua.moreton/Documents/GitHub/LQQ3
configfile: pytest.ini
plugins: cov-6.2.1, mock-3.14.1
collecting ... collected 78 items

tests/manual_test.py::test_basic_functionality PASSED                    [  1%]
tests/test_alpaca_trading_bot.py::TestAlpacaTradingBotSetup::test_init_with_valid_credentials PASSED [  2%]
tests/test_alpaca_trading_bot.py::TestAlpacaTradingBotSetup::test_init_missing_credentials PASSED [  3%]
tests/test_alpaca_trading_bot.py::TestAlpacaTradingBotSetup::test_live_trading_credentials PASSED [  5%]
tests/test_alpaca_trading_bot.py::TestPriceFetching::test_get_current_price_success PASSED [  6%]
tests/test_alpaca_trading_bot.py::TestPriceFetching::test_get_current_price_no_bid_ask PASSED [  7%]
tests/test_alpaca_trading_bot.py::TestPriceFetching::test_get_current_price_api_failure PASSED [  8%]
tests/test_alpaca_trading_bot.py::TestPriceFetching::test_get_current_price_symbol_not_found PASSED [ 10%]
tests/test_alpaca_trading_bot.py::TestAccountOperations::test_get_account_info_success PASSED [ 11%]
tests/test_alpaca_trading_bot.py::TestAccountOperations::test_get_account_info_failure PASSED [ 12%]
tests/test_alpaca_trading_bot.py::TestAccountOperations::test_get_positions_success PASSED [ 14%]
tests/test_alpaca_trading_bot.py::TestAccountOperations::test_get_positions_empty PASSED [ 15%]
tests/test_alpaca_trading_bot.py::TestOrderPlacement::test_place_buy_order_success PASSED [ 16%]
tests/test_alpaca_trading_bot.py::TestOrderPlacement::test_place_sell_order_success PASSED [ 17%]
tests/test_alpaca_trading_bot.py::TestOrderPlacement::test_place_order_invalid_quantity PASSED [ 19%]
tests/test_alpaca_trading_bot.py::TestOrderPlacement::test_place_order_api_failure PASSED [ 20%]
tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_empty_portfolio_to_nuclear FAILED [ 21%]
tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_existing_portfolio_minor_adjustment PASSED [ 23%]
tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_major_portfolio_change FAILED [ 24%]
tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_insufficient_cash FAILED [ 25%]
tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_price_fetching_failure PASSED [ 26%]
tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_complete_portfolio_switch FAILED [ 28%]
tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_partial_overlap_switch FAILED [ 29%]
tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_to_cash_position FAILED [ 30%]
tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_from_cash_to_positions FAILED [ 32%]
tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_micro_adjustments PASSED [ 33%]
tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_identical_portfolio PASSED [ 34%]
tests/test_alpaca_trading_bot.py::TestSignalParsing::test_parse_nuclear_portfolio_signals PASSED [ 35%]
tests/test_alpaca_trading_bot.py::TestSignalParsing::test_parse_single_buy_signal PASSED [ 37%]
tests/test_alpaca_trading_bot.py::TestSignalParsing::test_parse_hold_signals PASSED [ 38%]
tests/test_alpaca_trading_bot.py::TestSignalParsing::test_parse_mixed_signals PASSED [ 39%]
tests/test_alpaca_trading_bot.py::TestErrorHandling::test_account_info_unavailable FAILED [ 41%]
tests/test_alpaca_trading_bot.py::TestErrorHandling::test_all_price_fetches_fail FAILED [ 42%]
tests/test_alpaca_trading_bot.py::TestErrorHandling::test_order_placement_failures FAILED [ 43%]
tests/test_alpaca_trading_bot.py::TestMarketConditions::test_bull_market_nuclear_portfolio PASSED [ 44%]
tests/test_alpaca_trading_bot.py::TestMarketConditions::test_bear_market_portfolio PASSED [ 46%]
tests/test_alpaca_trading_bot.py::TestMarketConditions::test_volatile_market_conditions FAILED [ 47%]
tests/test_alpaca_trading_bot.py::TestIntegrationScenarios::test_full_nuclear_strategy_execution FAILED [ 48%]
tests/test_alpaca_trading_bot.py::TestIntegrationScenarios::test_no_signals_available PASSED [ 50%]
tests/test_alpaca_trading_bot.py::TestIntegrationScenarios::test_invalid_signal_format PASSED [ 51%]
tests/test_market_scenarios.py::TestMarketCrashScenario::test_portfolio_rebalance_during_crash FAILED [ 52%]
tests/test_market_scenarios.py::TestMarketCrashScenario::test_insufficient_buying_power_crash FAILED [ 53%]
tests/test_market_scenarios.py::TestVolatilitySpike::test_vix_spike_response FAILED [ 55%]
tests/test_market_scenarios.py::TestVolatilitySpike::test_extreme_bid_ask_spreads PASSED [ 56%]
tests/test_market_scenarios.py::TestLowLiquidityConditions::test_partial_fills_simulation FAILED [ 57%]
tests/test_market_scenarios.py::TestLowLiquidityConditions::test_illiquid_stock_pricing PASSED [ 58%]
tests/test_market_scenarios.py::TestAfterHoursTrading::test_after_hours_pricing PASSED [ 60%]
tests/test_market_scenarios.py::TestAfterHoursTrading::test_weekend_execution_attempt PASSED [ 61%]
tests/test_market_scenarios.py::TestExtremeMarketConditions::test_circuit_breaker_simulation FAILED [ 62%]
tests/test_market_scenarios.py::TestExtremeMarketConditions::test_flash_crash_scenario FAILED [ 64%]
tests/test_market_scenarios.py::TestExtremeMarketConditions::test_penny_stock_behavior FAILED [ 65%]
tests/test_market_scenarios.py::TestHighFrequencyScenarios::test_rapid_signal_changes PASSED [ 66%]
tests/test_market_scenarios.py::TestHighFrequencyScenarios::test_sub_second_price_updates PASSED [ 67%]
tests/test_performance.py::TestPerformance::test_rebalance_performance_large_portfolio FAILED [ 69%]
tests/test_performance.py::TestPerformance::test_rapid_successive_rebalances FAILED [ 70%]
tests/test_performance.py::TestPerformance::test_memory_usage_stability PASSED [ 71%]
tests/test_performance.py::TestConcurrency::test_concurrent_price_fetching PASSED [ 73%]
tests/test_performance.py::TestConcurrency::test_thread_safety_account_operations PASSED [ 74%]
tests/test_performance.py::TestStressConditions::test_api_rate_limiting_simulation FAILED [ 75%]
tests/test_performance.py::TestStressConditions::test_network_timeout_simulation FAILED [ 76%]
tests/test_performance.py::TestStressConditions::test_high_volume_order_simulation FAILED [ 78%]
tests/test_performance.py::TestResourceManagement::test_connection_cleanup PASSED [ 79%]
tests/test_performance.py::TestResourceManagement::test_large_response_handling PASSED [ 80%]
tests/test_performance.py::TestResourceManagement::test_memory_efficient_processing PASSED [ 82%]
tests/test_position_switching.py::TestPositionSwitching::test_single_position_switch FAILED [ 83%]
tests/test_position_switching.py::TestPositionSwitching::test_single_to_multi_asset_split FAILED [ 84%]
tests/test_position_switching.py::TestPositionSwitching::test_multi_to_single_consolidation FAILED [ 85%]
tests/test_position_switching.py::TestPositionSwitching::test_multi_to_multi_with_overlap FAILED [ 87%]
tests/test_position_switching.py::TestPositionSwitching::test_full_liquidation_to_cash FAILED [ 88%]
tests/test_position_switching.py::TestPositionSwitching::test_cash_to_new_position FAILED [ 89%]
tests/test_position_switching.py::TestPositionSwitching::test_identical_portfolio_no_trades PASSED [ 91%]
tests/test_position_switching.py::TestPositionSwitching::test_small_allocation_handling PASSED [ 92%]
tests/test_position_switching.py::TestPositionSwitching::test_insufficient_cash_scenario PASSED [ 93%]
tests/test_position_switching.py::TestPositionSwitching::test_complex_three_way_switch FAILED [ 94%]
tests/test_technical_indicators.py::TestTechnicalIndicators::test_rsi_basic PASSED [ 96%]
tests/test_technical_indicators.py::TestTechnicalIndicators::test_moving_average PASSED [ 97%]
tests/test_technical_indicators.py::TestTechnicalIndicators::test_moving_average_return PASSED [ 98%]
tests/test_technical_indicators.py::TestTechnicalIndicators::test_cumulative_return PASSED [100%]

=================================== FAILURES ===================================
______ TestPortfolioRebalancing.test_rebalance_empty_portfolio_to_nuclear ______

self = <tests.test_alpaca_trading_bot.TestPortfolioRebalancing object at 0x168541f40>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1697bc920>

    def test_rebalance_empty_portfolio_to_nuclear(self, mock_bot):
        """Test rebalancing from empty portfolio to nuclear allocation"""
        # Mock account with cash only
        mock_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 100000.0
        })
        mock_bot.get_positions = Mock(return_value={})
    
        # Mock successful order placement
        mock_bot.place_order = Mock(return_value='order_123')
    
        target_portfolio = {
            'SMR': 0.312,   # 31.2%
            'LEU': 0.395,   # 39.5%
            'OKLO': 0.292   # 29.2%
        }
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should place 3 buy orders
>       assert len(orders) == 3
E       assert 0 == 3
E        +  where 0 = len({})

tests/test_alpaca_trading_bot.py:272: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
________ TestPortfolioRebalancing.test_rebalance_major_portfolio_change ________

self = <tests.test_alpaca_trading_bot.TestPortfolioRebalancing object at 0x168542300>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1697ac620>

    def test_rebalance_major_portfolio_change(self, mock_bot):
        """Test major portfolio rebalancing (different strategy)"""
        # Mock account with tech portfolio
        mock_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 1000.0
        })
    
        mock_bot.get_positions = Mock(return_value={
            'AAPL': {
                'qty': 330.0,
                'market_value': 49500.0,  # 50%
                'current_price': 150.0
            },
            'TSLA': {
                'qty': 200.0,
                'market_value': 50000.0,  # 50%
                'current_price': 250.0
            }
        })
    
        mock_bot.place_order = Mock(return_value='order_123')
    
        # Switch to nuclear portfolio
        target_portfolio = {
            'SMR': 0.312,
            'LEU': 0.395,
            'OKLO': 0.292
        }
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should sell all current positions and buy new ones
        expected_orders = ['AAPL_SELL', 'TSLA_SELL', 'SMR_BUY', 'LEU_BUY', 'OKLO_BUY']
>       assert len(orders) >= 3  # At least the new buys
        ^^^^^^^^^^^^^^^^^^^^^^^
E       assert 0 >= 3
E        +  where 0 = len({})

tests/test_alpaca_trading_bot.py:363: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
__________ TestPortfolioRebalancing.test_rebalance_insufficient_cash ___________

self = <tests.test_alpaca_trading_bot.TestPortfolioRebalancing object at 0x1685424e0>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1697b54c0>

    def test_rebalance_insufficient_cash(self, mock_bot):
        """Test rebalancing when insufficient cash for full allocation"""
        mock_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 100.0  # Very little cash
        })
    
        mock_bot.get_positions = Mock(return_value={
            'SMR': {
                'qty': 100.0,
                'market_value': 4000.0,  # Only 4%
                'current_price': 40.0
            }
        })
    
        mock_bot.place_order = Mock(return_value='order_123')
    
        target_portfolio = {
            'SMR': 0.312,   # Want 31.2% but don't have cash
            'LEU': 0.395,
            'OKLO': 0.292
        }
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should handle insufficient cash gracefully
        # May not achieve full target allocation but shouldn't crash
>       assert isinstance(orders, list)
E       assert False
E        +  where False = isinstance({}, list)

tests/test_alpaca_trading_bot.py:392: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
______ TestPortfolioRebalancing.test_rebalance_complete_portfolio_switch _______

self = <tests.test_alpaca_trading_bot.TestPortfolioRebalancing object at 0x1685428a0>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x169787fe0>

    def test_rebalance_complete_portfolio_switch(self, mock_bot):
        """Test complete switch from one portfolio to another"""
        # Mock account info
        mock_bot.get_account_info = Mock(return_value={
            'portfolio_value': 47500.0,  # Total portfolio value
            'cash': 0.0
        })
    
        # Mock successful order placement
        mock_bot.place_order = Mock(return_value='mock_order_id')
    
        # Current: Hold different nuclear stocks
        current_positions = {
            'OKLO': {
                'qty': 500.0,
                'market_value': 25000.0,
                'current_price': 50.0
            },
            'NNE': {
                'qty': 750.0,
                'market_value': 22500.0,
                'current_price': 30.0
            }
        }
        mock_bot.get_positions = Mock(return_value=current_positions)
    
        # Target: Switch to classic nuclear portfolio
        target_portfolio = {'SMR': 0.6, 'LEU': 0.4}
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should sell all current positions and buy new ones
>       assert len(orders) == 4  # 2 sells + 2 buys
        ^^^^^^^^^^^^^^^^^^^^^^^
E       assert 0 == 4
E        +  where 0 = len({})

tests/test_alpaca_trading_bot.py:456: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
________ TestPortfolioRebalancing.test_rebalance_partial_overlap_switch ________

self = <tests.test_alpaca_trading_bot.TestPortfolioRebalancing object at 0x168542a80>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1697a3d70>

    def test_rebalance_partial_overlap_switch(self, mock_bot):
        """Test switching with partial overlap between portfolios"""
        # Mock account info
        mock_bot.get_account_info = Mock(return_value={
            'portfolio_value': 46000.0,  # Total portfolio value
            'cash': 0.0
        })
    
        # Mock successful order placement
        mock_bot.place_order = Mock(return_value='mock_order_id')
    
        # Current: Mixed portfolio with some overlap
        current_positions = {
            'SMR': {
                'qty': 400.0,
                'market_value': 16000.0,
                'current_price': 40.0
            },
            'OKLO': {
                'qty': 600.0,
                'market_value': 30000.0,
                'current_price': 50.0
            }
        }
        mock_bot.get_positions = Mock(return_value=current_positions)
    
        # Target: Keep SMR, drop OKLO, add LEU
        target_portfolio = {'SMR': 0.65, 'LEU': 0.35}
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should: sell all OKLO, buy SMR and LEU
        oklo_sells = [o for o in orders if o['symbol'] == 'OKLO' and o['side'] == OrderSide.SELL]
>       assert len(oklo_sells) == 1
E       assert 0 == 1
E        +  where 0 = len([])

tests/test_alpaca_trading_bot.py:503: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
___________ TestPortfolioRebalancing.test_rebalance_to_cash_position ___________

self = <tests.test_alpaca_trading_bot.TestPortfolioRebalancing object at 0x168542c60>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x168540d10>

    def test_rebalance_to_cash_position(self, mock_bot):
        """Test liquidating entire portfolio to cash"""
        # Mock account info
        mock_bot.get_account_info = Mock(return_value={
            'portfolio_value': 34000.0,  # Total portfolio value
            'cash': 0.0
        })
    
        # Mock successful order placement
        mock_bot.place_order = Mock(return_value='mock_order_id')
    
        # Current: Some positions
        current_positions = {
            'SMR': {
                'qty': 500.0,
                'market_value': 20000.0,
                'current_price': 40.0
            },
            'LEU': {
                'qty': 400.0,
                'market_value': 14000.0,
                'current_price': 35.0
            }
        }
        mock_bot.get_positions = Mock(return_value=current_positions)
    
        # Target: Empty portfolio (all cash)
        target_portfolio = {}
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should sell all positions
>       assert len(orders) == 2
E       assert 0 == 2
E        +  where 0 = len({})

tests/test_alpaca_trading_bot.py:547: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
________ TestPortfolioRebalancing.test_rebalance_from_cash_to_positions ________

self = <tests.test_alpaca_trading_bot.TestPortfolioRebalancing object at 0x168542e40>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x16972d310>

    def test_rebalance_from_cash_to_positions(self, mock_bot):
        """Test deploying cash to new positions"""
        # Mock account info
        mock_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,  # Total portfolio value
            'cash': 100000.0  # All cash
        })
    
        # Mock successful order placement
        mock_bot.place_order = Mock(return_value='mock_order_id')
    
        # Current: No positions (all cash)
        mock_bot.get_positions = Mock(return_value={})
    
        # Target: New nuclear allocation
        target_portfolio = {'SMR': 0.5, 'LEU': 0.3, 'OKLO': 0.2}
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should only buy (no sells since starting from cash)
>       assert len(orders) == 3
E       assert 0 == 3
E        +  where 0 = len({})

tests/test_alpaca_trading_bot.py:581: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
_______________ TestErrorHandling.test_account_info_unavailable ________________

self = <tests.test_alpaca_trading_bot.TestErrorHandling object at 0x168543350>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x16985b170>

    def test_account_info_unavailable(self, mock_bot):
        """Test handling when account info is unavailable"""
        mock_bot.get_account_info = Mock(return_value={})
    
        target_portfolio = {'SMR': 0.5, 'LEU': 0.5}
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
>       assert orders == []
E       assert {} == []
E         
E         Full diff:
E         - []
E         + {}

tests/test_alpaca_trading_bot.py:786: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:270 Could not get account information
________________ TestErrorHandling.test_all_price_fetches_fail _________________

self = <tests.test_alpaca_trading_bot.TestErrorHandling object at 0x168543530>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1697ca7e0>

    def test_all_price_fetches_fail(self, mock_bot):
        """Test handling when all price fetches fail"""
        mock_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 50000.0
        })
        mock_bot.get_positions = Mock(return_value={})
        mock_bot.get_current_price = Mock(return_value=0.0)  # All prices fail
    
        target_portfolio = {'SMR': 0.5, 'LEU': 0.5}
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should handle gracefully without crashing
>       assert isinstance(orders, list)
E       assert False
E        +  where False = isinstance({}, list)

tests/test_alpaca_trading_bot.py:801: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
_______________ TestErrorHandling.test_order_placement_failures ________________

self = <tests.test_alpaca_trading_bot.TestErrorHandling object at 0x168543710>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1696f5190>

    def test_order_placement_failures(self, mock_bot):
        """Test handling when order placement fails"""
        mock_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 50000.0
        })
        mock_bot.get_positions = Mock(return_value={})
        mock_bot.get_current_price = Mock(return_value=100.0)
        mock_bot.place_order = Mock(return_value=None)  # All orders fail
    
        target_portfolio = {'SMR': 0.5, 'LEU': 0.5}
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should handle gracefully
>       assert isinstance(orders, list)
E       assert False
E        +  where False = isinstance({}, list)

tests/test_alpaca_trading_bot.py:817: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
_____________ TestMarketConditions.test_volatile_market_conditions _____________

self = <tests.test_alpaca_trading_bot.TestMarketConditions object at 0x168543d40>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x16972c410>

    def test_volatile_market_conditions(self, mock_bot):
        """Test handling of rapidly changing prices"""
        # Mock volatile price fetching
        call_count = 0
        def volatile_prices(symbol):
            nonlocal call_count
            call_count += 1
            base_price = {'SMR': 40.0, 'LEU': 200.0, 'OKLO': 60.0}.get(symbol, 100.0)
            # Simulate price volatility
            volatility = 0.1 * (call_count % 3 - 1)  # -10%, 0%, +10%
            return base_price * (1 + volatility)
    
        mock_bot.get_current_price = Mock(side_effect=volatile_prices)
        mock_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 50000.0
        })
        mock_bot.get_positions = Mock(return_value={})
        mock_bot.place_order = Mock(return_value='order_123')
    
        target_portfolio = {'SMR': 0.33, 'LEU': 0.33, 'OKLO': 0.34}
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should handle volatile prices without issues
>       assert isinstance(orders, list)
E       assert False
E        +  where False = isinstance({}, list)

tests/test_alpaca_trading_bot.py:899: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
________ TestIntegrationScenarios.test_full_nuclear_strategy_execution _________

self = <tests.test_alpaca_trading_bot.TestIntegrationScenarios object at 0x168543fb0>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1697927e0>

    def test_full_nuclear_strategy_execution(self, mock_bot):
        """Test complete nuclear strategy execution flow"""
        # Mock signal file reading
        mock_signals = [
            {
                'symbol': 'SMR',
                'action': 'BUY',
                'reason': 'Nuclear portfolio allocation: 31.2% (Bull market)',
                'timestamp': datetime.now().isoformat()
            },
            {
                'symbol': 'LEU',
                'action': 'BUY',
                'reason': 'Nuclear portfolio allocation: 39.5% (Bull market)',
                'timestamp': datetime.now().isoformat()
            },
            {
                'symbol': 'OKLO',
                'action': 'BUY',
                'reason': 'Nuclear portfolio allocation: 29.2% (Bull market)',
                'timestamp': datetime.now().isoformat()
            }
        ]
    
        mock_bot.read_nuclear_signals = Mock(return_value=mock_signals)
        mock_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 100000.0
        })
        mock_bot.get_positions = Mock(return_value={})
        mock_bot.get_current_price = Mock(side_effect=lambda symbol: {
            'SMR': 40.0, 'LEU': 200.0, 'OKLO': 60.0
        }.get(symbol, 0.0))
        mock_bot.place_order = Mock(return_value='order_123')
        mock_bot.rebalance_portfolio = Mock(return_value=[
            {'symbol': 'SMR', 'side': OrderSide.BUY, 'qty': 78.0, 'order_id': 'order_1', 'estimated_value': 31200.0},
            {'symbol': 'LEU', 'side': OrderSide.BUY, 'qty': 197.5, 'order_id': 'order_2', 'estimated_value': 39500.0},
            {'symbol': 'OKLO', 'side': OrderSide.BUY, 'qty': 486.67, 'order_id': 'order_3', 'estimated_value': 29200.0}
        ])
    
        # Test the full execution
        success = mock_bot.execute_nuclear_strategy()
    
>       assert success is True
E       assert False is True

tests/test_alpaca_trading_bot.py:958: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:542 💥 Critical error executing nuclear strategy: 'list' object has no attribute 'items'
ERROR    root:alpaca_trader.py:544 Stack trace: Traceback (most recent call last):
  File "/Users/joshua.moreton/Documents/GitHub/LQQ3/tests/../src/execution/alpaca_trader.py", line 531, in execute_nuclear_strategy
    for trade_desc, order_id in orders.items():
                                ^^^^^^^^^^^^
AttributeError: 'list' object has no attribute 'items'
________ TestMarketCrashScenario.test_portfolio_rebalance_during_crash _________

self = <tests.test_market_scenarios.TestMarketCrashScenario object at 0x168543c50>
crash_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1697a3560>

    def test_portfolio_rebalance_during_crash(self, crash_bot):
        """Test portfolio rebalancing during major market decline"""
        # Mock massive portfolio decline
        crash_bot.get_account_info = Mock(return_value={
            'portfolio_value': 50000.0,  # Down 50% from $100k
            'cash': 5000.0
        })
    
        # Mock current positions with huge losses
        crash_bot.get_positions = Mock(return_value={
            'SMR': {
                'qty': 500.0,
                'market_value': 15000.0,  # Down from $30k
                'current_price': 30.0     # Down from $60
            },
            'LEU': {
                'qty': 100.0,
                'market_value': 15000.0,  # Down from $30k
                'current_price': 150.0    # Down from $300
            },
            'OKLO': {
                'qty': 333.0,
                'market_value': 15000.0,  # Down from $30k
                'current_price': 45.0     # Down from $90
            }
        })
    
        # Mock current prices (further decline)
        crash_bot.get_current_price = Mock(side_effect=lambda symbol: {
            'SMR': 25.0,   # Further decline
            'LEU': 120.0,  # Further decline
            'OKLO': 40.0   # Further decline
        }.get(symbol, 50.0))
    
        crash_bot.place_order = Mock(return_value='crash_order')
    
        # Switch to defensive portfolio
        defensive_portfolio = {
            'UVXY': 0.75,  # VIX spike protection
            'BTAL': 0.25   # Bear market ETF
        }
    
        orders = crash_bot.rebalance_portfolio(defensive_portfolio)
    
        # Should execute defensive rebalancing
>       assert isinstance(orders, list)
E       assert False
E        +  where False = isinstance({}, list)

tests/test_market_scenarios.py:79: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
_________ TestMarketCrashScenario.test_insufficient_buying_power_crash _________

self = <tests.test_market_scenarios.TestMarketCrashScenario object at 0x168543440>
crash_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1697b5bb0>

    def test_insufficient_buying_power_crash(self, crash_bot):
        """Test handling when buying power is restricted during crash"""
        crash_bot.get_account_info = Mock(return_value={
            'portfolio_value': 30000.0,
            'cash': 100.0,  # Very little cash
            'buying_power': 50.0  # Restricted buying power
        })
    
        crash_bot.get_positions = Mock(return_value={
            'SMR': {
                'qty': 200.0,
                'market_value': 10000.0,
                'current_price': 50.0
            }
        })
    
        crash_bot.get_current_price = Mock(return_value=100.0)
        crash_bot.place_order = Mock(return_value='order_123')
    
        target_portfolio = {'UVXY': 1.0}  # Want to go all-in UVXY
    
        orders = crash_bot.rebalance_portfolio(target_portfolio)
    
        # Should handle limited buying power gracefully
>       assert isinstance(orders, list)
E       AssertionError: assert False
E        +  where False = isinstance({'SMR_SELL': 'order_123', 'UVXY_BUY': 'order_123'}, list)

tests/test_market_scenarios.py:106: AssertionError
_________________ TestVolatilitySpike.test_vix_spike_response __________________

self = <tests.test_market_scenarios.TestVolatilitySpike object at 0x1685431a0>
vol_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x16986eae0>

    def test_vix_spike_response(self, vol_bot):
        """Test response to VIX spike scenario"""
        vol_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 5000.0
        })
    
        vol_bot.get_positions = Mock(return_value={
            'TQQQ': {
                'qty': 1000.0,
                'market_value': 95000.0,  # Leveraged tech position
                'current_price': 95.0
            }
        })
    
        # Mock UVXY spike pricing
        def volatile_pricing(symbol):
            if symbol == 'UVXY':
                return 25.0  # VIX spike
            elif symbol == 'TQQQ':
                return 85.0  # Tech decline
            return 100.0
    
        vol_bot.get_current_price = Mock(side_effect=volatile_pricing)
        vol_bot.place_order = Mock(return_value='vol_order')
    
        # Switch to volatility protection
        vol_portfolio = {'UVXY': 1.0}
    
        orders = vol_bot.rebalance_portfolio(vol_portfolio)
    
        # Should execute volatility hedge
>       assert 'TQQQ_SELL' in orders or len(orders) > 0
E       AssertionError: assert ('TQQQ_SELL' in {} or 0 > 0)
E        +  where 0 = len({})

tests/test_market_scenarios.py:154: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
___________ TestLowLiquidityConditions.test_partial_fills_simulation ___________

self = <tests.test_market_scenarios.TestLowLiquidityConditions object at 0x16856d550>
liquidity_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1698d11c0>

    def test_partial_fills_simulation(self, liquidity_bot):
        """Test handling of partial order fills"""
        # Mock order placement that might result in partial fills
        def mock_order_placement(symbol, qty, side):
            if qty > 1000:  # Large orders might be partially filled
                return None  # Simulate rejection of large orders
            return 'small_order_123'
    
        liquidity_bot.place_order = Mock(side_effect=mock_order_placement)
        liquidity_bot.get_current_price = Mock(return_value=100.0)
        liquidity_bot.get_account_info = Mock(return_value={
            'portfolio_value': 500000.0,  # Large account
            'cash': 500000.0
        })
        liquidity_bot.get_positions = Mock(return_value={})
    
        # Try to buy large position
        large_portfolio = {'SMR': 1.0}  # Want entire portfolio in SMR
    
        orders = liquidity_bot.rebalance_portfolio(large_portfolio)
    
        # Should handle large order size gracefully
>       assert isinstance(orders, list)
E       assert False
E        +  where False = isinstance({}, list)

tests/test_market_scenarios.py:206: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
_________ TestExtremeMarketConditions.test_circuit_breaker_simulation __________

self = <tests.test_market_scenarios.TestExtremeMarketConditions object at 0x16856de20>
extreme_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x16972cf20>

    def test_circuit_breaker_simulation(self, extreme_bot):
        """Test behavior during market circuit breaker halt"""
        # Mock API errors that might occur during circuit breakers
        extreme_bot.trading_client.submit_order = Mock(side_effect=Exception("Market halted"))
        extreme_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 50000.0
        })
        extreme_bot.get_positions = Mock(return_value={})
        extreme_bot.get_current_price = Mock(return_value=100.0)
    
        target_portfolio = {'UVXY': 1.0}
    
        orders = extreme_bot.rebalance_portfolio(target_portfolio)
    
        # Should handle market halt gracefully
>       assert isinstance(orders, list)
E       assert False
E        +  where False = isinstance({}, list)

tests/test_market_scenarios.py:299: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
____________ TestExtremeMarketConditions.test_flash_crash_scenario _____________

self = <tests.test_market_scenarios.TestExtremeMarketConditions object at 0x16856e000>
extreme_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1697ae7b0>

    def test_flash_crash_scenario(self, extreme_bot):
        """Test rapid price changes during flash crash"""
        # Mock rapidly changing prices
        price_sequence = [100.0, 80.0, 60.0, 40.0, 65.0]  # Flash crash and recovery
        call_count = 0
    
        def flash_crash_prices(symbol):
            nonlocal call_count
            if call_count < len(price_sequence):
                price = price_sequence[call_count]
                call_count += 1
                return price
            return price_sequence[-1]
    
        extreme_bot.get_current_price = Mock(side_effect=flash_crash_prices)
        extreme_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 50000.0
        })
        extreme_bot.get_positions = Mock(return_value={})
        extreme_bot.place_order = Mock(return_value='flash_order')
    
        target_portfolio = {'SMR': 1.0}
    
        orders = extreme_bot.rebalance_portfolio(target_portfolio)
    
        # Should handle rapid price changes
>       assert isinstance(orders, list)
E       assert False
E        +  where False = isinstance({}, list)

tests/test_market_scenarios.py:328: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
____________ TestExtremeMarketConditions.test_penny_stock_behavior _____________

self = <tests.test_market_scenarios.TestExtremeMarketConditions object at 0x16856e1e0>
extreme_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x169786ed0>

    def test_penny_stock_behavior(self, extreme_bot):
        """Test handling of very low-priced stocks"""
        # Mock penny stock prices
        extreme_bot.get_current_price = Mock(return_value=0.05)  # 5 cents
        extreme_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 100000.0
        })
        extreme_bot.get_positions = Mock(return_value={})
        extreme_bot.place_order = Mock(return_value='penny_order')
    
        target_portfolio = {'PENNY': 1.0}
    
        orders = extreme_bot.rebalance_portfolio(target_portfolio)
    
        # Should handle penny stocks (but might result in huge quantities)
>       assert isinstance(orders, list)
E       assert False
E        +  where False = isinstance({}, list)

tests/test_market_scenarios.py:346: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
__________ TestPerformance.test_rebalance_performance_large_portfolio __________

self = <tests.test_performance.TestPerformance object at 0x16856fb00>
perf_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x169785ca0>

    def test_rebalance_performance_large_portfolio(self, perf_bot):
        """Test rebalancing performance with large portfolio"""
        # Mock large portfolio (50 positions)
        large_positions = {}
        for i in range(50):
            symbol = f'STOCK{i:02d}'
            large_positions[symbol] = {
                'qty': 100.0,
                'market_value': 10000.0,
                'current_price': 100.0
            }
    
        perf_bot.get_account_info = Mock(return_value={
            'portfolio_value': 500000.0,
            'cash': 10000.0
        })
        perf_bot.get_positions = Mock(return_value=large_positions)
        perf_bot.get_current_price = Mock(return_value=100.0)
        perf_bot.place_order = Mock(return_value='order_123')
    
        # Target portfolio (switch to 3 nuclear stocks)
        target_portfolio = {'SMR': 0.33, 'LEU': 0.33, 'OKLO': 0.34}
    
        start_time = time.time()
        orders = perf_bot.rebalance_portfolio(target_portfolio)
        execution_time = time.time() - start_time
    
        # Should complete in reasonable time (< 5 seconds)
        assert execution_time < 5.0
>       assert isinstance(orders, list)
E       assert False
E        +  where False = isinstance({}, list)

tests/test_performance.py:63: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
_______________ TestPerformance.test_rapid_successive_rebalances _______________

self = <tests.test_performance.TestPerformance object at 0x16856e030>
perf_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x16985b830>

    def test_rapid_successive_rebalances(self, perf_bot):
        """Test multiple rapid rebalancing operations"""
        perf_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 50000.0
        })
        perf_bot.get_positions = Mock(return_value={})
        perf_bot.get_current_price = Mock(return_value=100.0)
        perf_bot.place_order = Mock(return_value='order_123')
    
        # Different portfolio targets
        portfolios = [
            {'SMR': 1.0},
            {'LEU': 1.0},
            {'OKLO': 1.0},
            {'UVXY': 1.0},
            {'SMR': 0.5, 'LEU': 0.5}
        ]
    
        start_time = time.time()
        for portfolio in portfolios:
            orders = perf_bot.rebalance_portfolio(portfolio)
>           assert isinstance(orders, list)
E           assert False
E            +  where False = isinstance({}, list)

tests/test_performance.py:87: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
____________ TestStressConditions.test_api_rate_limiting_simulation ____________

self = <tests.test_performance.TestStressConditions object at 0x1685900b0>
stress_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1698589b0>

    def test_api_rate_limiting_simulation(self, stress_bot):
        """Test behavior when hitting API rate limits"""
        call_count = 0
    
        def rate_limited_api_call(symbol):
            nonlocal call_count
            call_count += 1
            if call_count > 10:  # Simulate rate limit after 10 calls
                raise Exception("Rate limit exceeded")
            return 100.0
    
        stress_bot.get_current_price = Mock(side_effect=rate_limited_api_call)
        stress_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 50000.0
        })
        stress_bot.get_positions = Mock(return_value={})
        stress_bot.place_order = Mock(return_value='order_123')
    
        # Try to rebalance multiple times (will hit rate limit)
        portfolios = [{'STOCK{}'.format(i): 1.0} for i in range(15)]
    
        successful_rebalances = 0
        for portfolio in portfolios:
            try:
                orders = stress_bot.rebalance_portfolio(portfolio)
                if isinstance(orders, list):
                    successful_rebalances += 1
            except:
                pass  # Expected for rate-limited calls
    
        # Should handle some rebalances before hitting rate limit
>       assert successful_rebalances > 0
E       assert 0 > 0

tests/test_performance.py:240: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
_____________ TestStressConditions.test_network_timeout_simulation _____________

self = <tests.test_performance.TestStressConditions object at 0x168590290>
stress_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x16984bf20>

    def test_network_timeout_simulation(self, stress_bot):
        """Test handling of network timeouts"""
        def timeout_simulation(symbol):
            if symbol == 'TIMEOUT_STOCK':
                time.sleep(5)  # Simulate long network delay
                raise Exception("Request timeout")
            return 100.0
    
        stress_bot.get_current_price = Mock(side_effect=timeout_simulation)
        stress_bot.get_account_info = Mock(return_value={
            'portfolio_value': 100000.0,
            'cash': 50000.0
        })
        stress_bot.get_positions = Mock(return_value={})
    
        target_portfolio = {
            'SMR': 0.5,
            'TIMEOUT_STOCK': 0.5  # This will timeout
        }
    
        start_time = time.time()
        orders = stress_bot.rebalance_portfolio(target_portfolio)
        execution_time = time.time() - start_time
    
        # Should handle timeout gracefully and continue with other symbols
>       assert isinstance(orders, list)
E       assert False
E        +  where False = isinstance({}, list)

tests/test_performance.py:268: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
____________ TestStressConditions.test_high_volume_order_simulation ____________

self = <tests.test_performance.TestStressConditions object at 0x168590470>
stress_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1697c9640>

    def test_high_volume_order_simulation(self, stress_bot):
        """Test placing many orders rapidly"""
        order_count = 0
    
        def mock_order_placement(symbol, qty, side):
            nonlocal order_count
            order_count += 1
            time.sleep(0.01)  # Small delay per order
            return f'order_{order_count}'
    
        stress_bot.place_order = Mock(side_effect=mock_order_placement)
        stress_bot.get_current_price = Mock(return_value=100.0)
        stress_bot.get_account_info = Mock(return_value={
            'portfolio_value': 1000000.0,  # Large account
            'cash': 1000000.0
        })
        stress_bot.get_positions = Mock(return_value={})
    
        # Target portfolio with many positions
        target_portfolio = {f'STOCK{i:02d}': 0.02 for i in range(50)}  # 50 positions of 2% each
    
        start_time = time.time()
        orders = stress_bot.rebalance_portfolio(target_portfolio)
        execution_time = time.time() - start_time
    
        # Should handle many orders efficiently
>       assert isinstance(orders, list)
E       assert False
E        +  where False = isinstance({}, list)

tests/test_performance.py:298: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    root:alpaca_trader.py:396 Error rebalancing portfolio: 'buying_power'
______________ TestPositionSwitching.test_single_position_switch _______________

self = <tests.test_position_switching.TestPositionSwitching object at 0x168591430>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x16984bf20>

    def test_single_position_switch(self, mock_bot):
        """Test switching from one single position to another single position"""
        # Current: 100% AAPL (100 shares at $150 = $15,000)
        current_positions = {
            'AAPL': {
                'qty': 100.0,
                'market_value': 15000.0,
                'current_price': 150.0
            }
        }
        mock_bot.get_positions = Mock(return_value=current_positions)
    
        # Target: 100% TSLA
        target_portfolio = {'TSLA': 1.0}
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should place exactly 2 orders: sell all AAPL, buy TSLA
        assert len(orders) == 2
    
        # Check for AAPL sell order and TSLA buy order
>       sell_orders = [o for o in orders if o['side'] == OrderSide.SELL and o['symbol'] == 'AAPL']
                                            ^^^^^^^^^
E       TypeError: string indices must be integers, not 'str'

tests/test_position_switching.py:72: TypeError
____________ TestPositionSwitching.test_single_to_multi_asset_split ____________

self = <tests.test_position_switching.TestPositionSwitching object at 0x1685915b0>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1698d1520>

    def test_single_to_multi_asset_split(self, mock_bot):
        """Test switching from single position to multi-asset portfolio"""
        # Current: 100% AAPL (100 shares at $150 = $15,000)
        current_positions = {
            'AAPL': {
                'qty': 100.0,
                'market_value': 15000.0,
                'current_price': 150.0
            }
        }
        mock_bot.get_positions = Mock(return_value=current_positions)
    
        # Target: 50% AAPL, 50% TSLA
        target_portfolio = {'AAPL': 0.5, 'TSLA': 0.5}
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should place orders: partial sell AAPL, buy TSLA
        assert len(orders) >= 1  # At least TSLA buy, may or may not need AAPL sell
    
        # Should buy TSLA (new position)
>       tsla_buys = [o for o in orders if o['side'] == OrderSide.BUY and o['symbol'] == 'TSLA']
                                          ^^^^^^^^^
E       TypeError: string indices must be integers, not 'str'

tests/test_position_switching.py:101: TypeError
___________ TestPositionSwitching.test_multi_to_single_consolidation ___________

self = <tests.test_position_switching.TestPositionSwitching object at 0x168591790>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1697b41a0>

    def test_multi_to_single_consolidation(self, mock_bot):
        """Test switching from multi-asset to single position"""
        # Current: 50% AAPL, 50% TSLA
        current_positions = {
            'AAPL': {
                'qty': 50.0,
                'market_value': 7500.0,
                'current_price': 150.0
            },
            'TSLA': {
                'qty': 30.0,
                'market_value': 7500.0,
                'current_price': 250.0
            }
        }
        mock_bot.get_positions = Mock(return_value=current_positions)
    
        # Target: 100% TSLA
        target_portfolio = {'TSLA': 1.0}
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should sell AAPL (not in target) and may buy more TSLA
        assert len(orders) >= 1
    
        # Check for AAPL full sell (not in target portfolio)
>       aapl_sells = [o for o in orders if o['side'] == OrderSide.SELL and o['symbol'] == 'AAPL']
                                           ^^^^^^^^^
E       TypeError: string indices must be integers, not 'str'

tests/test_position_switching.py:134: TypeError
____________ TestPositionSwitching.test_multi_to_multi_with_overlap ____________

self = <tests.test_position_switching.TestPositionSwitching object at 0x168591970>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x169790320>

    def test_multi_to_multi_with_overlap(self, mock_bot):
        """Test switching between two multi-asset portfolios with some overlap"""
        # Current: 50% AAPL, 50% TSLA
        current_positions = {
            'AAPL': {
                'qty': 50.0,
                'market_value': 7500.0,
                'current_price': 150.0
            },
            'TSLA': {
                'qty': 30.0,
                'market_value': 7500.0,
                'current_price': 250.0
            }
        }
        mock_bot.get_positions = Mock(return_value=current_positions)
    
        # Target: 70% TSLA, 30% MSFT (drop AAPL, increase TSLA, add MSFT)
        target_portfolio = {'TSLA': 0.7, 'MSFT': 0.3}
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should sell AAPL (not in target) and buy MSFT (new position)
        assert len(orders) >= 2
    
        # Check for AAPL full sell (not in target)
>       aapl_sells = [o for o in orders if o['side'] == OrderSide.SELL and o['symbol'] == 'AAPL']
                                           ^^^^^^^^^
E       TypeError: string indices must be integers, not 'str'

tests/test_position_switching.py:168: TypeError
_____________ TestPositionSwitching.test_full_liquidation_to_cash ______________

self = <tests.test_position_switching.TestPositionSwitching object at 0x168591b50>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x1697aecf0>

    def test_full_liquidation_to_cash(self, mock_bot):
        """Test switching to all-cash (full liquidation)"""
        # Current: 50% AAPL, 50% TSLA
        current_positions = {
            'AAPL': {
                'qty': 50.0,
                'market_value': 7500.0,
                'current_price': 150.0
            },
            'TSLA': {
                'qty': 30.0,
                'market_value': 7500.0,
                'current_price': 250.0
            }
        }
        mock_bot.get_positions = Mock(return_value=current_positions)
    
        # Target: Empty portfolio (all cash)
        target_portfolio = {}
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should sell all positions
        assert len(orders) == 2
    
        # Check that all current positions are sold
>       sell_orders = [o for o in orders if o['side'] == OrderSide.SELL]
                                            ^^^^^^^^^
E       TypeError: string indices must be integers, not 'str'

tests/test_position_switching.py:203: TypeError
_______________ TestPositionSwitching.test_cash_to_new_position ________________

self = <tests.test_position_switching.TestPositionSwitching object at 0x168591d30>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x16972ce60>

    def test_cash_to_new_position(self, mock_bot):
        """Test switching from all-cash to new positions"""
        # Current: No positions (all cash)
        current_positions = {}
        mock_bot.get_positions = Mock(return_value=current_positions)
    
        # Target: 60% SMR, 40% LEU (nuclear portfolio)
        target_portfolio = {'SMR': 0.6, 'LEU': 0.4}
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should place buy orders for both positions
        assert len(orders) >= 1  # At least one buy order
    
        # The bot might place orders sequentially, so we just check
        # that it's trying to establish positions
>       buy_orders = [o for o in orders if o['side'] == OrderSide.BUY]
                                           ^^^^^^^^^
E       TypeError: string indices must be integers, not 'str'

tests/test_position_switching.py:225: TypeError
_____________ TestPositionSwitching.test_complex_three_way_switch ______________

self = <tests.test_position_switching.TestPositionSwitching object at 0x1685917c0>
mock_bot = <execution.alpaca_trader.AlpacaTradingBot object at 0x169827530>

    def test_complex_three_way_switch(self, mock_bot):
        """Test complex switching between three different assets"""
        # Current: 33% AAPL, 33% TSLA, 34% MSFT
        current_positions = {
            'AAPL': {
                'qty': 22.0,
                'market_value': 3300.0,
                'current_price': 150.0
            },
            'TSLA': {
                'qty': 13.2,
                'market_value': 3300.0,
                'current_price': 250.0
            },
            'MSFT': {
                'qty': 11.33,
                'market_value': 3400.0,
                'current_price': 300.0
            }
        }
        mock_bot.get_positions = Mock(return_value=current_positions)
    
        # Target: 50% SMR, 30% LEU, 20% AAPL (major reshuffling)
        target_portfolio = {'SMR': 0.5, 'LEU': 0.3, 'AAPL': 0.2}
    
        orders = mock_bot.rebalance_portfolio(target_portfolio)
    
        # Should create multiple orders for the complex rebalancing
        assert len(orders) >= 2
    
        # Check that TSLA and MSFT are sold (not in target)
>       sell_orders = [o for o in orders if o['side'] == OrderSide.SELL]
                                            ^^^^^^^^^
E       TypeError: string indices must be integers, not 'str'

tests/test_position_switching.py:334: TypeError
=============================== warnings summary ===============================
.venv/lib/python3.12/site-packages/websockets/legacy/__init__.py:6
  /Users/joshua.moreton/Documents/GitHub/LQQ3/.venv/lib/python3.12/site-packages/websockets/legacy/__init__.py:6: DeprecationWarning: websockets.legacy is deprecated; see https://websockets.readthedocs.io/en/stable/howto/upgrade.html for upgrade instructions
    warnings.warn(  # deprecated in 14.0 - 2024-11-09

.venv/lib/python3.12/site-packages/pandas_ta/__init__.py:7
  /Users/joshua.moreton/Documents/GitHub/LQQ3/.venv/lib/python3.12/site-packages/pandas_ta/__init__.py:7: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
    from pkg_resources import get_distribution, DistributionNotFound

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_empty_portfolio_to_nuclear
FAILED tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_major_portfolio_change
FAILED tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_insufficient_cash
FAILED tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_complete_portfolio_switch
FAILED tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_partial_overlap_switch
FAILED tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_to_cash_position
FAILED tests/test_alpaca_trading_bot.py::TestPortfolioRebalancing::test_rebalance_from_cash_to_positions
FAILED tests/test_alpaca_trading_bot.py::TestErrorHandling::test_account_info_unavailable
FAILED tests/test_alpaca_trading_bot.py::TestErrorHandling::test_all_price_fetches_fail
FAILED tests/test_alpaca_trading_bot.py::TestErrorHandling::test_order_placement_failures
FAILED tests/test_alpaca_trading_bot.py::TestMarketConditions::test_volatile_market_conditions
FAILED tests/test_alpaca_trading_bot.py::TestIntegrationScenarios::test_full_nuclear_strategy_execution
FAILED tests/test_market_scenarios.py::TestMarketCrashScenario::test_portfolio_rebalance_during_crash
FAILED tests/test_market_scenarios.py::TestMarketCrashScenario::test_insufficient_buying_power_crash
FAILED tests/test_market_scenarios.py::TestVolatilitySpike::test_vix_spike_response
FAILED tests/test_market_scenarios.py::TestLowLiquidityConditions::test_partial_fills_simulation
FAILED tests/test_market_scenarios.py::TestExtremeMarketConditions::test_circuit_breaker_simulation
FAILED tests/test_market_scenarios.py::TestExtremeMarketConditions::test_flash_crash_scenario
FAILED tests/test_market_scenarios.py::TestExtremeMarketConditions::test_penny_stock_behavior
FAILED tests/test_performance.py::TestPerformance::test_rebalance_performance_large_portfolio
FAILED tests/test_performance.py::TestPerformance::test_rapid_successive_rebalances
FAILED tests/test_performance.py::TestStressConditions::test_api_rate_limiting_simulation
FAILED tests/test_performance.py::TestStressConditions::test_network_timeout_simulation
FAILED tests/test_performance.py::TestStressConditions::test_high_volume_order_simulation
FAILED tests/test_position_switching.py::TestPositionSwitching::test_single_position_switch
FAILED tests/test_position_switching.py::TestPositionSwitching::test_single_to_multi_asset_split
FAILED tests/test_position_switching.py::TestPositionSwitching::test_multi_to_single_consolidation
FAILED tests/test_position_switching.py::TestPositionSwitching::test_multi_to_multi_with_overlap
FAILED tests/test_position_switching.py::TestPositionSwitching::test_full_liquidation_to_cash
FAILED tests/test_position_switching.py::TestPositionSwitching::test_cash_to_new_position
FAILED tests/test_position_switching.py::TestPositionSwitching::test_complex_three_way_switch
============ 31 failed, 47 passed, 2 warnings in 112.18s (0:01:52) =============
