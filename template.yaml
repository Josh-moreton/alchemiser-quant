# yaml-language-server: $schema=https://raw.githubusercontent.com/aws/serverless-application-model/main/samtranslator/validator/sam_schema/schema.json
# yaml-language-server: disable-validation
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  The Alchemiser Quantitative Trading System

  Multi-strategy algorithmic trading engine deployed as an AWS Lambda Function

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - ephemeral
    Description: Deployment stage (dev, prod, or ephemeral)
  
  StackName:
    Type: String
    Default: ""
    Description: Optional override for stack-specific resource naming (used for ephemeral stacks)
  
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - ephemeral
    Description: Environment type for resource configuration
  
  ArtifactPrefix:
    Type: String
    Default: ""
    Description: S3 prefix for artifacts (used for ephemeral stack isolation)

  AlpacaKey:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Key (used only in dev; leave blank for prod)

  AlpacaSecret:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Secret (used only in dev; leave blank for prod)

  AlpacaEndpoint:
    Type: String
    Default: https://paper-api.alpaca.markets/v2
    Description: Alpaca API endpoint; defaults to paper for dev, live is used for prod

  EmailPassword:
    Type: String
    Default: ""
    NoEcho: true
    Description: Email SMTP password for dev notifications (optional)

  # Runtime configuration parameters (override via CD for each environment)
  LoggingLevel:
    Type: String
    Default: INFO
    Description: LOGGING__LEVEL for application logging

  DslMaxWorkers:
    Type: String
    Default: "7"
    Description: ALCHEMISER_DSL_MAX_WORKERS (string to align with Lambda env var type)


  # Production-only parameters (only used when Stage=prod)
  ProdAlpacaKey:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Key for production (required when Stage=prod)

  ProdAlpacaSecret:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Secret for production (required when Stage=prod)

  ProdAlpacaEndpoint:
    Type: String
    Default: https://api.alpaca.markets
    Description: Alpaca API endpoint for production

  ProdEmailPassword:
    Type: String
    Default: ""
    NoEcho: true
    Description: Email SMTP password for production notifications (optional)

  # Strategy configuration: now defined in code defaults. Override via env only if required.

Conditions:
  IsDev: !Equals [ !Ref Stage, dev ]
  IsEphemeral: !Equals [ !Ref Stage, ephemeral ]
  HasStackName: !Not [ !Equals [ !Ref StackName, "" ] ]
  UseStackNameForResources: !Or [ !Condition IsEphemeral, !Condition HasStackName ]

Globals:
  Function:
    Timeout: 900 # 15 minutes - max for Lambda
    MemorySize: 512
    Environment:
      Variables:
        # Logging
        LOGGING__LEVEL: !Ref LoggingLevel
        # Stage awareness for code-level profiles
        APP__STAGE: !If [ IsDev, "dev", "prod" ]
        # Alpaca Configuration
        ALPACA__KEY: !If [ IsDev, !Ref AlpacaKey, !Ref ProdAlpacaKey ]
        ALPACA__SECRET: !If [ IsDev, !Ref AlpacaSecret, !Ref ProdAlpacaSecret ]
        ALPACA__ENDPOINT: !If [ IsDev, !Ref AlpacaEndpoint, !Ref ProdAlpacaEndpoint ]
        # Email Configuration
        EMAIL__SMTP_SERVER: smtp.mail.me.com
        EMAIL__SMTP_PORT: 587
        EMAIL__FROM_EMAIL: josh@rwxt.org
        EMAIL__TO_EMAIL: josh@rwxt.org
        EMAIL__NEUTRAL_MODE: true
        EMAIL__PASSWORD: !If [ IsDev, !Ref EmailPassword, !Ref ProdEmailPassword ]
        # Strategy DSL configuration now comes from code defaults; override via env only if necessary
        # STRATEGY__DSL_FILES: '["1-KMLM.clj","2-Nuclear.clj","5-Coin.clj","6-TQQQ-FLT.clj"]'
        # STRATEGY__DSL_ALLOCATIONS: '{"1-KMLM.clj":0.4,"2-Nuclear.clj":0.25,"5-Coin.clj":0.1,"6-TQQQ-FLT.clj":0.25}'

        # DSL parallelism configuration
        ALCHEMISER_DSL_MAX_WORKERS: !Ref DslMaxWorkers

        # Trade ledger DynamoDB table
        TRADE_LEDGER__TABLE_NAME: !Ref TradeLedgerTable

  # Strategy configuration now packaged with code; env overrides optional

  # (no additional Globals keys)

Resources:
  # DynamoDB Table for trade ledger persistence
  TradeLedgerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !If 
        - UseStackNameForResources
        - !Sub "${StackName}-trade-ledger"
        - !Sub "alchemiser-trade-ledger-${Stage}"
      BillingMode: PAY_PER_REQUEST
      
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
        - AttributeName: GSI3PK
          AttributeType: S
        - AttributeName: GSI3SK
          AttributeType: S
        - AttributeName: GSI4PK
          AttributeType: S
        - AttributeName: GSI4SK
          AttributeType: S
      
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      
      GlobalSecondaryIndexes:
        # GSI1: Query by correlation_id
        - IndexName: GSI1-CorrelationIndex
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        
        # GSI2: Query by symbol
        - IndexName: GSI2-SymbolIndex
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        
        # GSI3: Query by strategy
        - IndexName: GSI3-StrategyIndex
          KeySchema:
            - AttributeName: GSI3PK
              KeyType: HASH
            - AttributeName: GSI3SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        
        # GSI4: Query snapshots by correlation_id
        - IndexName: GSI4-CorrelationSnapshotIndex
          KeySchema:
            - AttributeName: GSI4PK
              KeyType: HASH
            - AttributeName: GSI4SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
      
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Service
          Value: trade-ledger

  # Lambda Layer for dependencies
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !If
        - UseStackNameForResources
        - !Sub "${StackName}-dependencies"
        - !Sub "the-alchemiser-dependencies-${Stage}"
      Description: Dependencies for The Alchemiser Quantitative Trading System
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12

  TradingSystemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !If
        - UseStackNameForResources
        - !Sub "${StackName}-lambda"
        - !Sub "the-alchemiser-v2-lambda-${Stage}"
      PackageType: Zip
      Runtime: python3.12
      CodeUri: ./
      Handler: the_alchemiser.lambda_handler.lambda_handler
      Role: !GetAtt TradingSystemExecutionRole.Arn
      Layers:
        - !Ref DependenciesLayer
    Metadata:
      BuildMethod: python3.12
      BuildProperties:
        # Include only the the_alchemiser package
        Include:
          - 'the_alchemiser/**/*.py'
          - 'the_alchemiser/**/*.clj'
          - 'the_alchemiser/config/*.json'
          - 'the_alchemiser/py.typed'
        Exclude:
          # Sensitive files (security)
          - '.env*'
          - 'the_alchemiser/.env*'

          # Python cache and build artifacts
          - '**/__pycache__/**'
          - '**/*.pyc'
          - '**/*.pyo'
          - '**/*.egg-info/**'

          # IDE and editor files
          - 'the_alchemiser/.editorconfig'

          # Documentation within the_alchemiser
          - 'the_alchemiser/**/*.md'

  # Dead Letter Queue for failed trading executions
  TradingSystemDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If
        - UseStackNameForResources
        - !Sub "${StackName}-dlq"
        - !Sub "the-alchemiser-dlq-${Stage}"
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 60

  # S3 Bucket for PDF Reports
  ReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - UseStackNameForResources
        - !Sub "${StackName}-reports"
        - !Sub "the-alchemiser-reports-${Stage}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldReports
            Status: Enabled
            ExpirationInDays: 365  # Keep reports for 1 year
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Service
          Value: reports

  # Lambda Function for Report Generation
  ReportGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !If
        - UseStackNameForResources
        - !Sub "${StackName}-report-generator"
        - !Sub "the-alchemiser-report-generator-${Stage}"
      PackageType: Zip
      Runtime: python3.12
      CodeUri: ./
      Handler: the_alchemiser.reporting.lambda_handler.lambda_handler
      Role: !GetAtt ReportGeneratorExecutionRole.Arn
      Layers:
        - !Ref DependenciesLayer
      Timeout: 300  # 5 minutes for PDF generation
      MemorySize: 1024
      Environment:
        Variables:
          TRADE_LEDGER__TABLE_NAME: !Ref TradeLedgerTable
          REPORTS_S3_BUCKET: !Ref ReportsBucket
          LOGGING__LEVEL: !Ref LoggingLevel
    Metadata:
      BuildMethod: python3.12
      BuildProperties:
        Include:
          - 'the_alchemiser/**/*.py'
          - 'the_alchemiser/**/*.html'
          - 'the_alchemiser/**/*.css'
          - 'the_alchemiser/config/*.json'
          - 'the_alchemiser/py.typed'
        Exclude:
          - '.env*'
          - 'the_alchemiser/.env*'
          - '**/__pycache__/**'
          - '**/*.pyc'
          - '**/*.pyo'
          - '**/*.egg-info/**'
          - 'the_alchemiser/.editorconfig'
          - 'the_alchemiser/**/*.md'

  # IAM Role for Report Generator Lambda
  ReportGeneratorExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Policy for Report Generator Lambda
  ReportGeneratorExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ReportGeneratorPolicy
      Roles:
        - !Ref ReportGeneratorExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # CloudWatch Logs
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"

          # DynamoDB access for snapshots (read-only)
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt TradeLedgerTable.Arn
              - !Sub "${TradeLedgerTable.Arn}/index/*"

          # S3 access for reports (write-only)
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Resource: !Sub "${ReportsBucket.Arn}/*"

  # CloudWatch Log Group for Report Generator
  ReportGeneratorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !If
        - UseStackNameForResources
        - !Sub "/aws/lambda/${StackName}-report-generator"
        - !Sub "/aws/lambda/the-alchemiser-report-generator-${Stage}"
      RetentionInDays: !If [ IsEphemeral, 3, 30 ]

  # EventBridge Scheduler with proper timezone support and reduced retry policy
  TradingSystemSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !If
        - UseStackNameForResources
        - !Sub "${StackName}-daily-trading"
        - !Sub "the-alchemiser-daily-trading-${Stage}"
      Description: "Execute quantitative trading system daily at 9:35 AM New York time"
      ScheduleExpression: "cron(35 9 ? * MON-FRI *)"
      ScheduleExpressionTimezone: "America/New_York"
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt TradingSystemFunction.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        Input: |
          {
            "mode": "trade"
          }
        RetryPolicy:
          MaximumRetryAttempts: 1 # Reduced from default (185) to prevent excessive retries
        DeadLetterConfig:
          Arn: !GetAtt TradingSystemDLQ.Arn
      State: !If [ IsEphemeral, "DISABLED", "ENABLED" ]

  # Monthly summary scheduler: runs on the 1st of each month at 00:05 UTC
  MonthlySummarySchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !If
        - UseStackNameForResources
        - !Sub "${StackName}-monthly-summary"
        - !Sub "the-alchemiser-monthly-summary-${Stage}"
      Description: "Send monthly financial summary on the 1st (previous month)"
      ScheduleExpression: "cron(5 0 1 * ? *)"  # 00:05 UTC on day 1
      ScheduleExpressionTimezone: "UTC"
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt TradingSystemFunction.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        Input: |
          {
            "action": "monthly_summary"
          }
        RetryPolicy:
          MaximumRetryAttempts: 1
        DeadLetterConfig:
          Arn: !GetAtt TradingSystemDLQ.Arn
      State: !If [ IsEphemeral, "DISABLED", "ENABLED" ]

  # IAM Role for EventBridge Scheduler to invoke Lambda
  SchedulerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole

  # Separate policy for Scheduler role to avoid constant updates
  SchedulerExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SchedulerLambdaInvokePolicy
      Roles:
        - !Ref SchedulerExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt TradingSystemFunction.Arn
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt TradingSystemDLQ.Arn

  # IAM Role for Lambda execution
  TradingSystemExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Separate policy for Lambda execution role to avoid constant updates
  TradingSystemExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TradingSystemPolicy
      Roles:
        - !Ref TradingSystemExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # CloudWatch Logs (enhanced logging)
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
              - logs:DescribeLogGroups
            Resource: "*"

          # Lambda invocation for report generator
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt ReportGeneratorFunction.Arn

          # DynamoDB access for trade ledger
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:BatchWriteItem
            Resource:
              - !GetAtt TradeLedgerTable.Arn
              - !Sub "${TradeLedgerTable.Arn}/index/*"


  # CloudWatch Log Group with retention
  TradingSystemLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !If
        - UseStackNameForResources
        - !Sub "/aws/lambda/${StackName}-lambda"
        - !Sub "/aws/lambda/the-alchemiser-v2-lambda-${Stage}"
      RetentionInDays: !If [ IsEphemeral, 3, 30 ]

Outputs:
  TradingSystemFunctionArn:
    Description: "Quantitative Trading System Lambda Function ARN"
    Value: !GetAtt TradingSystemFunction.Arn

  TradingSystemLogGroupName:
    Description: "CloudWatch Log Group for monitoring"
    Value: !If
      - UseStackNameForResources
      - !Sub "/aws/lambda/${StackName}-lambda"
      - !Sub "/aws/lambda/the-alchemiser-v2-lambda-${Stage}"

  TradeLedgerTableName:
    Description: "DynamoDB table for trade ledger persistence"
    Value: !Ref TradeLedgerTable
    Export:
      Name: !If
        - UseStackNameForResources
        - !Sub "${StackName}-TradeLedgerTable"
        - !Sub "the-alchemiser-v2-${Stage}-TradeLedgerTable"

  DeploymentStage:
    Description: "Deployed stage"
    Value: !Ref Stage
  
  StackNameUsed:
    Description: "Stack name used for resource naming"
    Value: !If [ HasStackName, !Ref StackName, !Sub "the-alchemiser-v2-${Stage}" ]

  ReportGeneratorFunctionArn:
    Description: "Report Generator Lambda Function ARN"
    Value: !GetAtt ReportGeneratorFunction.Arn

  ReportsBucketName:
    Description: "S3 bucket for PDF reports"
    Value: !Ref ReportsBucket
    Export:
      Name: !If
        - UseStackNameForResources
        - !Sub "${StackName}-ReportsBucket"
        - !Sub "the-alchemiser-v2-${Stage}-ReportsBucket"

  ReportGeneratorLogGroupName:
    Description: "CloudWatch Log Group for Report Generator"
    Value: !If
      - UseStackNameForResources
      - !Sub "/aws/lambda/${StackName}-report-generator"
      - !Sub "/aws/lambda/the-alchemiser-report-generator-${Stage}"
