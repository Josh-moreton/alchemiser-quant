AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  The Alchemiser Quantitative Trading System

  Multi-strategy algorithmic trading engine deployed as an AWS Lambda Function

# Global configuration
Globals:
  Function:
    Timeout: 900 # 15 minutes - max for Lambda
    MemorySize: 512
    Environment:
      Variables:
        # Logging
        LOGGING__LEVEL: INFO

        # Alpaca Configuration (LIVE trading in Lambda)
        ALPACA__ENDPOINT: https://api.alpaca.markets
        ALPACA__CASH_RESERVE_PCT: 0.02

        # Secrets Manager (credentials loaded at runtime)
        SECRETS_MANAGER__REGION_NAME: us-east-1
        SECRETS_MANAGER__SECRET_NAME: the-alchemiser-v2-secrets

        # Email Configuration
        EMAIL__SMTP_SERVER: smtp.mail.me.com
        EMAIL__SMTP_PORT: 587
        EMAIL__FROM_EMAIL: josh@rwxt.org
        EMAIL__TO_EMAIL: josh@rwxt.org
        EMAIL__NEUTRAL_MODE: true

Resources:
  # Lambda Layer for dependencies
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: the-alchemiser-dependencies
      Description: Dependencies for The Alchemiser Quantitative Trading System
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12

  TradingSystemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: the-alchemiser-v2-lambda
      PackageType: Zip
      Runtime: python3.12
      CodeUri: .
      Handler: the_alchemiser.lambda_handler.lambda_handler
      Role: !GetAtt TradingSystemExecutionRole.Arn
      Layers:
        - !Ref DependenciesLayer
      # No Events here - using separate EventBridge Scheduler below

  # Dead Letter Queue for failed trading executions
  TradingSystemDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: the-alchemiser-dlq
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 60

  # EventBridge Scheduler with proper timezone support and reduced retry policy
  TradingSystemSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: the-alchemiser-daily-trading
      Description: "Execute quantitative trading system daily at 9:35 AM New York time"
      ScheduleExpression: "cron(35 9 ? * MON-FRI *)"
      ScheduleExpressionTimezone: "America/New_York"
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt TradingSystemFunction.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        Input: |
          {
            "mode": "trade"
          }
        RetryPolicy:
          MaximumRetryAttempts: 1 # Reduced from default (185) to prevent excessive retries
        DeadLetterConfig:
          Arn: !GetAtt TradingSystemDLQ.Arn
      State: "ENABLED"

  # IAM Role for EventBridge Scheduler to invoke Lambda
  SchedulerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SchedulerLambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt TradingSystemFunction.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt TradingSystemDLQ.Arn

  # IAM Role for Lambda execution
  TradingSystemExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TradingSystemPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Secrets Manager access for API keys
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Ref TradingSecrets

              # S3 access for alerts and data storage
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::the-alchemiser-v2-s3
                  - arn:aws:s3:::the-alchemiser-v2-s3/*

              # CloudWatch Logs (enhanced logging)
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: "*"

  # CloudWatch Log Group with retention
  TradingSystemLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TradingSystemFunction}"
      RetentionInDays: 30

  # Secrets Manager Secret (managed by this stack, value set manually post-deploy)
  TradingSecrets:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Name: the-alchemiser-v2-secrets
      Description: "Secrets for The Alchemiser v2 (ALPACA_KEY/SECRET, optional TWELVEDATA_KEY, SMTP_PASSWORD)"

Outputs:
  TradingSystemFunction:
    Description: "Quantitative Trading System Lambda Function ARN"
    Value: !GetAtt TradingSystemFunction.Arn

  TradingSystemLogGroup:
    Description: "CloudWatch Log Group for monitoring"
    Value: !Ref TradingSystemLogGroup
