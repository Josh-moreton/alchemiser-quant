AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  The Alchemiser Quantitative Trading System

  Multi-strategy algorithmic trading engine deployed as an AWS Lambda Function

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Deployment stage (dev or prod)

  TradeLedgerBucketName:
    Type: String
    Default: the-alchemiser-v2-s3
    Description: S3 bucket name for trade ledger storage (override for dev to avoid collisions)

  AlpacaKey:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Key (used only in dev; leave blank for prod)

  AlpacaSecret:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Secret (used only in dev; leave blank for prod)

  AlpacaEndpoint:
    Type: String
    Default: https://paper-api.alpaca.markets/v2
    Description: Alpaca API endpoint; defaults to paper for dev, live is used for prod

Conditions:
  IsDev: !Equals [ !Ref Stage, dev ]

Globals:
  Function:
    Timeout: 900 # 15 minutes - max for Lambda
    MemorySize: 512
    Environment:
      Variables:
        # Logging
        LOGGING__LEVEL: INFO
        # Trade Ledger
        EXECUTION__ENABLE_TRADE_LEDGER: !If [ IsDev, "false", "true" ]
        S3_BUCKET_NAME: !Ref TradeLedgerBucket
        # Alpaca Configuration
        ALPACA__KEY: !If [ IsDev, !Ref AlpacaKey, "" ]
        ALPACA__SECRET: !If [ IsDev, !Ref AlpacaSecret, "" ]
        ALPACA__ENDPOINT: !If [ IsDev, !Ref AlpacaEndpoint, "https://api.alpaca.markets" ]
        ALPACA__CASH_RESERVE_PCT: "0.02"
        # Secrets Manager configuration
        SECRETS_MANAGER__ENABLED: !If [ IsDev, "false", "true" ]
        SECRETS_MANAGER__REGION_NAME: !Ref "AWS::Region"
        SECRETS_MANAGER__SECRET_NAME: !If [ IsDev, "the-alchemiser-v2-secrets-dev", "the-alchemiser-v2-secrets" ]
        # Email Configuration
        EMAIL__SMTP_SERVER: smtp.mail.me.com
        EMAIL__SMTP_PORT: 587
        EMAIL__FROM_EMAIL: josh@rwxt.org
        EMAIL__TO_EMAIL: josh@rwxt.org
        EMAIL__NEUTRAL_MODE: true
        # Strategy DSL configuration - matches current .env file exactly
        STRATEGY__DSL_FILES: '["1-KMLM.clj","2-Nuclear.clj","3-Starburst.clj","4-What.clj","5-Coin.clj","6-TQQQ-FLT.clj","7-Phoenix.clj"]'
        STRATEGY__DSL_ALLOCATIONS: '{"1-KMLM.clj":0.2,"2-Nuclear.clj":0.15,"3-Starburst.clj":0.15,"4-What.clj":0.1,"5-Coin.clj":0.1,"6-TQQQ-FLT.clj":0.15,"7-Phoenix.clj":0.15}'

        # DSL parallelism configuration
        ALCHEMISER_DSL_PARALLELISM: threads
        ALCHEMISER_DSL_MAX_WORKERS: 7

Resources:
  # Lambda Layer for dependencies
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "the-alchemiser-dependencies-${Stage}"
      Description: Dependencies for The Alchemiser Quantitative Trading System
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12

  TradingSystemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "the-alchemiser-v2-lambda-${Stage}"
      PackageType: Zip
      Runtime: python3.12
      CodeUri: .
      Handler: the_alchemiser.lambda_handler.lambda_handler
      Role: !GetAtt TradingSystemExecutionRole.Arn
      Layers:
        - !Ref DependenciesLayer

  # Dead Letter Queue for failed trading executions
  TradingSystemDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "the-alchemiser-dlq-${Stage}"
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 60

  # EventBridge Scheduler with proper timezone support and reduced retry policy
  TradingSystemSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub "the-alchemiser-daily-trading-${Stage}"
      Description: "Execute quantitative trading system daily at 9:35 AM New York time"
      ScheduleExpression: "cron(35 9 ? * MON-FRI *)"
      ScheduleExpressionTimezone: "America/New_York"
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt TradingSystemFunction.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        Input: |
          {
            "mode": "trade"
          }
        RetryPolicy:
          MaximumRetryAttempts: 1 # Reduced from default (185) to prevent excessive retries
        DeadLetterConfig:
          Arn: !GetAtt TradingSystemDLQ.Arn
      State: "ENABLED"

  # Monthly summary scheduler: runs on the 1st of each month at 00:05 UTC
  MonthlySummarySchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub "the-alchemiser-monthly-summary-${Stage}"
      Description: "Send monthly financial summary on the 1st (previous month)"
      ScheduleExpression: "cron(5 0 1 * ? *)"  # 00:05 UTC on day 1
      ScheduleExpressionTimezone: "UTC"
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt TradingSystemFunction.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        Input: |
          {
            "action": "monthly_summary"
          }
        RetryPolicy:
          MaximumRetryAttempts: 1
        DeadLetterConfig:
          Arn: !GetAtt TradingSystemDLQ.Arn
      State: "ENABLED"

  # IAM Role for EventBridge Scheduler to invoke Lambda
  SchedulerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SchedulerLambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt TradingSystemFunction.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt TradingSystemDLQ.Arn

  # IAM Role for Lambda execution
  TradingSystemExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TradingSystemPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # S3 access for trade ledger storage
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt TradeLedgerBucket.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "${TradeLedgerBucket.Arn}/*"

              # CloudWatch Logs (enhanced logging)
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: "*"

              # AWS Secrets Manager read access (for prod when enabled)
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:the-alchemiser-v2-secrets*"


  # S3 bucket for trade ledger storage (managed by this stack)
  TradeLedgerBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref TradeLedgerBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # CloudWatch Log Group with retention
  TradingSystemLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/the-alchemiser-v2-lambda-${Stage}"
      RetentionInDays: 30

Outputs:
  TradingSystemFunctionArn:
    Description: "Quantitative Trading System Lambda Function ARN"
    Value: !GetAtt TradingSystemFunction.Arn

  TradingSystemLogGroupName:
    Description: "CloudWatch Log Group for monitoring"
    Value: !Sub "/aws/lambda/the-alchemiser-v2-lambda-${Stage}"

  DeploymentStage:
    Description: "Deployed stage"
    Value: !Ref Stage
