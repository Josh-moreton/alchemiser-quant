# yaml-language-server: $schema=https://raw.githubusercontent.com/aws/serverless-application-model/main/samtranslator/validator/sam_schema/schema.json
# yaml-language-server: disable-validation
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  The Alchemiser Quantitative Trading System

  Multi-strategy algorithmic trading engine deployed as an AWS Lambda Function

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - ephemeral
    Description: Deployment stage (dev, prod, or ephemeral)
  
  StackName:
    Type: String
    Default: ""
    Description: Optional override for stack-specific resource naming (used for ephemeral stacks)
  
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - ephemeral
    Description: Environment type for resource configuration
  
  ArtifactPrefix:
    Type: String
    Default: ""
    Description: S3 prefix for artifacts (used for ephemeral stack isolation)

  AlpacaKey:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Key (used only in dev; leave blank for prod)

  AlpacaSecret:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Secret (used only in dev; leave blank for prod)

  AlpacaEndpoint:
    Type: String
    Default: https://paper-api.alpaca.markets/v2
    Description: Alpaca API endpoint; defaults to paper for dev, live is used for prod

  EmailPassword:
    Type: String
    Default: ""
    NoEcho: true
    Description: Email SMTP password for dev notifications (optional)

  # Runtime configuration parameters (override via CD for each environment)
  LoggingLevel:
    Type: String
    Default: INFO
    Description: LOGGING__LEVEL for application logging

  DslMaxWorkers:
    Type: String
    Default: "7"
    Description: ALCHEMISER_DSL_MAX_WORKERS (string to align with Lambda env var type)


  # Production-only parameters (only used when Stage=prod)
  ProdAlpacaKey:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Key for production (required when Stage=prod)

  ProdAlpacaSecret:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Secret for production (required when Stage=prod)

  ProdAlpacaEndpoint:
    Type: String
    Default: https://api.alpaca.markets
    Description: Alpaca API endpoint for production

  ProdEmailPassword:
    Type: String
    Default: ""
    NoEcho: true
    Description: Email SMTP password for production notifications (optional)

  # Strategy configuration: now defined in code defaults. Override via env only if required.

Conditions:
  IsDev: !Equals [ !Ref Stage, dev ]
  IsEphemeral: !Equals [ !Ref Stage, ephemeral ]
  HasStackName: !Not [ !Equals [ !Ref StackName, "" ] ]
  UseStackNameForResources: !Or [ !Condition IsEphemeral, !Condition HasStackName ]

Globals:
  Function:
    Timeout: 900 # 15 minutes - max for Lambda
    MemorySize: 512
    Environment:
      Variables:
        # Logging
        LOGGING__LEVEL: !Ref LoggingLevel
        # Stage awareness for code-level profiles
        APP__STAGE: !If [ IsDev, "dev", "prod" ]
        # Alpaca Configuration
        ALPACA__KEY: !If [ IsDev, !Ref AlpacaKey, !Ref ProdAlpacaKey ]
        ALPACA__SECRET: !If [ IsDev, !Ref AlpacaSecret, !Ref ProdAlpacaSecret ]
        ALPACA__ENDPOINT: !If [ IsDev, !Ref AlpacaEndpoint, !Ref ProdAlpacaEndpoint ]
        # Email Configuration
        EMAIL__SMTP_SERVER: smtp.mail.me.com
        EMAIL__SMTP_PORT: 587
        EMAIL__FROM_EMAIL: josh@rwxt.org
        EMAIL__TO_EMAIL: josh@rwxt.org
        EMAIL__NEUTRAL_MODE: true
        EMAIL__PASSWORD: !If [ IsDev, !Ref EmailPassword, !Ref ProdEmailPassword ]
        # Strategy DSL configuration now comes from code defaults; override via env only if necessary
        # STRATEGY__DSL_FILES: '["1-KMLM.clj","2-Nuclear.clj","5-Coin.clj","6-TQQQ-FLT.clj"]'
        # STRATEGY__DSL_ALLOCATIONS: '{"1-KMLM.clj":0.4,"2-Nuclear.clj":0.25,"5-Coin.clj":0.1,"6-TQQQ-FLT.clj":0.25}'

        # DSL parallelism configuration
        ALCHEMISER_DSL_MAX_WORKERS: !Ref DslMaxWorkers

        # Trade ledger S3 bucket
        TRADE_LEDGER__BUCKET_NAME: !Ref TradeLedgerBucket

        # EventBridge configuration
        EVENTBRIDGE_BUS_NAME: !Ref AlchemiserEventBus

        # Idempotency table name
        IDEMPOTENCY_TABLE_NAME: !Ref IdempotencyTable

  # Strategy configuration now packaged with code; env overrides optional

  # (no additional Globals keys)

Resources:
  # S3 Bucket for trade ledger persistence
  TradeLedgerBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If 
        - UseStackNameForResources
        - !Sub "${StackName}-trade-ledger"
        - !Sub "the-alchemiser-v2-trade-ledger-${Stage}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Lambda Layer for dependencies
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !If
        - UseStackNameForResources
        - !Sub "${StackName}-dependencies"
        - !Sub "the-alchemiser-dependencies-${Stage}"
      Description: Dependencies for The Alchemiser Quantitative Trading System
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12

  TradingSystemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !If
        - UseStackNameForResources
        - !Sub "${StackName}-lambda"
        - !Sub "the-alchemiser-v2-lambda-${Stage}"
      PackageType: Zip
      Runtime: python3.12
      CodeUri: ./
      Handler: the_alchemiser.lambda_handler.lambda_handler
      Role: !GetAtt TradingSystemExecutionRole.Arn
      Layers:
        - !Ref DependenciesLayer
    Metadata:
      BuildMethod: python3.12
      BuildProperties:
        # Include only the the_alchemiser package
        Include:
          - 'the_alchemiser/**/*.py'
          - 'the_alchemiser/**/*.clj'
          - 'the_alchemiser/config/*.json'
          - 'the_alchemiser/py.typed'
        Exclude:
          # Sensitive files (security)
          - '.env*'
          - 'the_alchemiser/.env*'

          # Python cache and build artifacts
          - '**/__pycache__/**'
          - '**/*.pyc'
          - '**/*.pyo'
          - '**/*.egg-info/**'

          # IDE and editor files
          - 'the_alchemiser/.editorconfig'

          # Documentation within the_alchemiser
          - 'the_alchemiser/**/*.md'

  # Dead Letter Queue for failed trading executions
  TradingSystemDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !If
        - UseStackNameForResources
        - !Sub "${StackName}-dlq"
        - !Sub "the-alchemiser-dlq-${Stage}"
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 60

  # EventBridge Scheduler with proper timezone support and reduced retry policy
  TradingSystemSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !If
        - UseStackNameForResources
        - !Sub "${StackName}-daily-trading"
        - !Sub "the-alchemiser-daily-trading-${Stage}"
      Description: "Execute quantitative trading system daily at 9:35 AM New York time"
      ScheduleExpression: "cron(35 9 ? * MON-FRI *)"
      ScheduleExpressionTimezone: "America/New_York"
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt TradingSystemFunction.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        Input: |
          {
            "mode": "trade"
          }
        RetryPolicy:
          MaximumRetryAttempts: 1 # Reduced from default (185) to prevent excessive retries
        DeadLetterConfig:
          Arn: !GetAtt TradingSystemDLQ.Arn
      State: !If [ IsEphemeral, "DISABLED", "ENABLED" ]

  # IAM Role for EventBridge Scheduler to invoke Lambda
  SchedulerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole

  # Separate policy for Scheduler role to avoid constant updates
  SchedulerExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SchedulerLambdaInvokePolicy
      Roles:
        - !Ref SchedulerExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt TradingSystemFunction.Arn
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt TradingSystemDLQ.Arn

  # IAM Role for Lambda execution
  TradingSystemExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Separate policy for Lambda execution role to avoid constant updates
  TradingSystemExecutionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TradingSystemPolicy
      Roles:
        - !Ref TradingSystemExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # CloudWatch Logs (enhanced logging)
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
              - logs:DescribeLogGroups
            Resource: "*"

          # S3 access for trade ledger
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !GetAtt TradeLedgerBucket.Arn
              - !Sub "${TradeLedgerBucket.Arn}/*"

          # EventBridge access for event publishing
          - Effect: Allow
            Action:
              - events:PutEvents
            Resource:
              - !GetAtt AlchemiserEventBus.Arn

          # CloudWatch metrics for EventBridge monitoring
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: "*"
            Condition:
              StringEquals:
                cloudwatch:namespace: Alchemiser/EventBridge

          # DynamoDB access for idempotency
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
            Resource:
              - !GetAtt IdempotencyTable.Arn


  # CloudWatch Log Group with retention
  TradingSystemLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !If
        - UseStackNameForResources
        - !Sub "/aws/lambda/${StackName}-lambda"
        - !Sub "/aws/lambda/the-alchemiser-v2-lambda-${Stage}"
      RetentionInDays: !If [ IsEphemeral, 3, 30 ]

  # =========================================================================
  # EventBridge Resources for Event-Driven Architecture (Phase 1)
  # =========================================================================

  # DynamoDB Table for event idempotency
  IdempotencyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "alchemiser-event-dedup-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: event_id
          AttributeType: S
      KeySchema:
        - AttributeName: event_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Project
          Value: Alchemiser
        - Key: Purpose
          Value: Event idempotency deduplication

  # Named EventBridge Bus for Alchemiser trading events
  # Note: This is a standard EventBridge bus with a custom name, not the default bus
  AlchemiserEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "alchemiser-trading-events-${Stage}"
      Description: Event bus for Alchemiser trading system event-driven architecture
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Project
          Value: Alchemiser
        - Key: Purpose
          Value: Event-driven trading workflow

  # EventBridge Bus Policy - allow same account to publish events
  EventBusPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref AlchemiserEventBus
      StatementId: AllowSameAccountPublish
      Statement:
        Effect: Allow
        Principal:
          AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
        Action: events:PutEvents
        Resource: !GetAtt AlchemiserEventBus.Arn

  # Event Archive for replay and audit (365-day retention)
  EventArchive:
    Type: AWS::Events::Archive
    Properties:
      ArchiveName: !Sub "alchemiser-event-archive-${Stage}"
      SourceArn: !GetAtt AlchemiserEventBus.Arn
      Description: Archive for event replay and audit trail (365-day retention)
      RetentionDays: 365
      EventPattern:
        source:
          - prefix: "alchemiser."

  # Dead Letter Queue for failed events
  EventDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "alchemiser-event-dlq-${Stage}"
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 60
      Tags:
        - Key: Purpose
          Value: EventBridge-DeadLetterQueue
        - Key: Environment
          Value: !Ref Stage

  # Event Rule: Route SignalGenerated events to Portfolio Lambda
  SignalGeneratedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "alchemiser-signal-generated-${Stage}"
      Description: Route SignalGenerated events to portfolio handler
      EventBusName: !Ref AlchemiserEventBus
      State: ENABLED
      EventPattern:
        source:
          - alchemiser.strategy
        detail-type:
          - SignalGenerated
      Targets:
        - Arn: !GetAtt TradingSystemFunction.Arn
          Id: PortfolioHandler
          RetryPolicy:
            MaximumRetryAttempts: 3
            MaximumEventAgeInSeconds: 3600
          DeadLetterConfig:
            Arn: !GetAtt EventDLQ.Arn

  # Event Rule: Route RebalancePlanned events to Execution Lambda
  RebalancePlannedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "alchemiser-rebalance-planned-${Stage}"
      Description: Route RebalancePlanned events to execution handler
      EventBusName: !Ref AlchemiserEventBus
      State: ENABLED
      EventPattern:
        source:
          - alchemiser.portfolio
        detail-type:
          - RebalancePlanned
      Targets:
        - Arn: !GetAtt TradingSystemFunction.Arn
          Id: ExecutionHandler
          RetryPolicy:
            MaximumRetryAttempts: 3
            MaximumEventAgeInSeconds: 3600
          DeadLetterConfig:
            Arn: !GetAtt EventDLQ.Arn

  # Event Rule: Route TradeExecuted events to Orchestrator
  TradeExecutedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "alchemiser-trade-executed-${Stage}"
      Description: Route TradeExecuted events to orchestrator for monitoring
      EventBusName: !Ref AlchemiserEventBus
      State: ENABLED
      EventPattern:
        source:
          - alchemiser.execution
        detail-type:
          - TradeExecuted
      Targets:
        - Arn: !GetAtt TradingSystemFunction.Arn
          Id: OrchestratorMonitor
          RetryPolicy:
            MaximumRetryAttempts: 2
            MaximumEventAgeInSeconds: 1800
          DeadLetterConfig:
            Arn: !GetAtt EventDLQ.Arn

  # Event Rule: Route TradingNotificationRequested events to notification handler
  TradingNotificationRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "alchemiser-trading-notification-${Stage}"
      Description: Route TradingNotificationRequested events to notification handler
      EventBusName: !Ref AlchemiserEventBus
      State: ENABLED
      EventPattern:
        source:
          - alchemiser.orchestration
        detail-type:
          - TradingNotificationRequested
      Targets:
        - Arn: !GetAtt TradingSystemFunction.Arn
          Id: NotificationHandler
          RetryPolicy:
            MaximumRetryAttempts: 3
            MaximumEventAgeInSeconds: 3600
          DeadLetterConfig:
            Arn: !GetAtt EventDLQ.Arn

  # Event Rule: Route all workflow events to orchestrator for monitoring
  AllEventsToOrchestratorRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "alchemiser-all-events-monitor-${Stage}"
      Description: Route all alchemiser events to orchestrator for monitoring
      EventBusName: !Ref AlchemiserEventBus
      State: ENABLED
      EventPattern:
        source:
          - prefix: "alchemiser."
      Targets:
        - Arn: !GetAtt TradingSystemFunction.Arn
          Id: OrchestratorMonitor
          RetryPolicy:
            MaximumRetryAttempts: 2
            MaximumEventAgeInSeconds: 1800
          DeadLetterConfig:
            Arn: !GetAtt EventDLQ.Arn

  # Lambda Permission: Allow EventBridge to invoke Lambda for SignalGenerated
  SignalGeneratedPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TradingSystemFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SignalGeneratedRule.Arn

  # Lambda Permission: Allow EventBridge to invoke Lambda for RebalancePlanned
  RebalancePlannedPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TradingSystemFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RebalancePlannedRule.Arn

  # Lambda Permission: Allow EventBridge to invoke Lambda for TradeExecuted
  TradeExecutedPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TradingSystemFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TradeExecutedRule.Arn

  # Lambda Permission: Allow EventBridge to invoke Lambda for TradingNotification
  TradingNotificationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TradingSystemFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TradingNotificationRule.Arn

  # Lambda Permission: Allow EventBridge to invoke Lambda for all events
  AllEventsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TradingSystemFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AllEventsToOrchestratorRule.Arn

  # =========================================================================
  # CloudWatch Alarms for EventBridge Monitoring
  # =========================================================================

  # SNS Topic for Alarm Notifications
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "alchemiser-alarms-${Stage}"
      DisplayName: Alchemiser Trading System Alarms
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Project
          Value: Alchemiser

  # Alarm: DLQ has messages (indicates event processing failures)
  DLQDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "alchemiser-dlq-high-depth-${Stage}"
      AlarmDescription: Alert when EventBridge DLQ has messages (failed events)
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt EventDLQ.QueueName
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # Alarm: EventBridge failed invocations for SignalGenerated rule
  SignalGeneratedFailedInvocationsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "alchemiser-signal-generated-failed-${Stage}"
      AlarmDescription: Alert when SignalGenerated events fail to invoke Lambda
      Namespace: AWS/Events
      MetricName: FailedInvocations
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: RuleName
          Value: !Ref SignalGeneratedRule
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # Alarm: EventBridge failed invocations for RebalancePlanned rule
  RebalancePlannedFailedInvocationsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "alchemiser-rebalance-planned-failed-${Stage}"
      AlarmDescription: Alert when RebalancePlanned events fail to invoke Lambda
      Namespace: AWS/Events
      MetricName: FailedInvocations
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: RuleName
          Value: !Ref RebalancePlannedRule
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # Alarm: EventBridge throttled rules
  EventBridgeThrottledAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "alchemiser-eventbridge-throttled-${Stage}"
      AlarmDescription: Alert when EventBridge rules are throttled
      Namespace: AWS/Events
      MetricName: ThrottledRules
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # Alarm: Lambda errors
  LambdaErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "alchemiser-lambda-errors-${Stage}"
      AlarmDescription: Alert when Lambda function has errors
      Namespace: AWS/Lambda
      MetricName: Errors
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 3
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TradingSystemFunction
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # Alarm: Lambda throttles
  LambdaThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "alchemiser-lambda-throttles-${Stage}"
      AlarmDescription: Alert when Lambda function is throttled
      Namespace: AWS/Lambda
      MetricName: Throttles
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TradingSystemFunction
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # Alarm: Lambda duration p95
  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "alchemiser-lambda-duration-high-${Stage}"
      AlarmDescription: Alert when Lambda duration p95 exceeds 5 minutes
      Namespace: AWS/Lambda
      MetricName: Duration
      ExtendedStatistic: p95
      Period: 300
      EvaluationPeriods: 2
      Threshold: 300000  # 5 minutes in milliseconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TradingSystemFunction
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

  # Alarm: Lambda near-timeout warning (approaching 10-minute timeout)
  LambdaNearTimeoutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "alchemiser-lambda-near-timeout-${Stage}"
      AlarmDescription: Alert when Lambda duration exceeds 8 minutes (80% of 10-min timeout)
      Namespace: AWS/Lambda
      MetricName: Duration
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 480000  # 8 minutes in milliseconds (80% of 600s timeout)
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref TradingSystemFunction
      AlarmActions:
        - !Ref AlarmNotificationTopic
      TreatMissingData: notBreaching

Outputs:
  TradingSystemFunctionArn:
    Description: "Quantitative Trading System Lambda Function ARN"
    Value: !GetAtt TradingSystemFunction.Arn

  TradingSystemLogGroupName:
    Description: "CloudWatch Log Group for monitoring"
    Value: !If
      - UseStackNameForResources
      - !Sub "/aws/lambda/${StackName}-lambda"
      - !Sub "/aws/lambda/the-alchemiser-v2-lambda-${Stage}"

  TradeLedgerBucketName:
    Description: "S3 bucket for trade ledger persistence"
    Value: !Ref TradeLedgerBucket

  DeploymentStage:
    Description: "Deployed stage"
    Value: !Ref Stage

  # EventBridge Infrastructure Outputs
  EventBusName:
    Description: "EventBridge event bus name for trading events"
    Value: !Ref AlchemiserEventBus

  EventBusArn:
    Description: "EventBridge event bus ARN"
    Value: !GetAtt AlchemiserEventBus.Arn

  EventArchiveName:
    Description: "Event archive name for replay capability"
    Value: !Ref EventArchive

  EventDLQUrl:
    Description: "Dead letter queue URL for failed events"
    Value: !Ref EventDLQ

  EventDLQArn:
    Description: "Dead letter queue ARN for failed events"
    Value: !GetAtt EventDLQ.Arn

  IdempotencyTableName:
    Description: "DynamoDB table name for event idempotency"
    Value: !Ref IdempotencyTable

  AlarmTopicArn:
    Description: "SNS topic ARN for CloudWatch alarm notifications"
    Value: !Ref AlarmNotificationTopic
  
  StackNameUsed:
    Description: "Stack name used for resource naming"
    Value: !If [ HasStackName, !Ref StackName, !Sub "the-alchemiser-v2-${Stage}" ]
