AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  The Alchemiser Quantitative Trading System

  Multi-strategy algorithmic trading engine deployed as an AWS Lambda Function

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Deployment stage (dev or prod)

  AlpacaKey:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Key (used only in dev; leave blank for prod)

  AlpacaSecret:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Secret (used only in dev; leave blank for prod)

  AlpacaEndpoint:
    Type: String
    Default: https://paper-api.alpaca.markets/v2
    Description: Alpaca API endpoint; defaults to paper for dev, live is used for prod

  # Runtime configuration parameters (override via CD for each environment)
  LoggingLevel:
    Type: String
    Default: INFO
    Description: LOGGING__LEVEL for application logging

  DslMaxWorkers:
    Type: String
    Default: "7"
    Description: ALCHEMISER_DSL_MAX_WORKERS (string to align with Lambda env var type)


  # Production-only parameters (only used when Stage=prod)
  ProdAlpacaKey:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Key for production (required when Stage=prod)

  ProdAlpacaSecret:
    Type: String
    Default: ""
    NoEcho: true
    Description: Alpaca API Secret for production (required when Stage=prod)

  ProdAlpacaEndpoint:
    Type: String
    Default: https://api.alpaca.markets
    Description: Alpaca API endpoint for production

  ProdEmailPassword:
    Type: String
    Default: ""
    NoEcho: true
    Description: Email SMTP password for production notifications (optional)

  # Strategy configuration: now defined in code defaults. Override via env only if required.

Conditions:
  IsDev: !Equals [ !Ref Stage, dev ]

Globals:
  Function:
    Timeout: 900 # 15 minutes - max for Lambda
    MemorySize: 512
    Environment:
      Variables:
        # Logging
        LOGGING__LEVEL: !Ref LoggingLevel
        # Stage awareness for code-level profiles
        APP__STAGE: !If [ IsDev, "dev", "prod" ]
        # Alpaca Configuration
        ALPACA__KEY: !If [ IsDev, !Ref AlpacaKey, !Ref ProdAlpacaKey ]
        ALPACA__SECRET: !If [ IsDev, !Ref AlpacaSecret, !Ref ProdAlpacaSecret ]
        ALPACA__ENDPOINT: !If [ IsDev, !Ref AlpacaEndpoint, !Ref ProdAlpacaEndpoint ]
        # Email Configuration
        EMAIL__SMTP_SERVER: smtp.mail.me.com
        EMAIL__SMTP_PORT: 587
        EMAIL__FROM_EMAIL: josh@rwxt.org
        EMAIL__TO_EMAIL: josh@rwxt.org
        EMAIL__NEUTRAL_MODE: true
        EMAIL__PASSWORD: !If [ IsDev, "", !Ref ProdEmailPassword ]
        # Strategy DSL configuration now comes from code defaults; override via env only if necessary
        # STRATEGY__DSL_FILES: '["1-KMLM.clj","2-Nuclear.clj","5-Coin.clj","6-TQQQ-FLT.clj"]'
        # STRATEGY__DSL_ALLOCATIONS: '{"1-KMLM.clj":0.4,"2-Nuclear.clj":0.25,"5-Coin.clj":0.1,"6-TQQQ-FLT.clj":0.25}'

        # DSL parallelism configuration
        ALCHEMISER_DSL_MAX_WORKERS: !Ref DslMaxWorkers

        # Trade ledger S3 bucket
        TRADE_LEDGER__BUCKET_NAME: !Ref TradeLedgerBucket

  # Strategy configuration now packaged with code; env overrides optional

  # (no additional Globals keys)

Resources:
  # S3 Bucket for trade ledger persistence
  TradeLedgerBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "the-alchemiser-v2-trade-ledger-${Stage}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Lambda Layer for dependencies
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "the-alchemiser-dependencies-${Stage}"
      Description: Dependencies for The Alchemiser Quantitative Trading System
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.12

  TradingSystemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "the-alchemiser-v2-lambda-${Stage}"
      PackageType: Zip
      Runtime: python3.12
      CodeUri: ./
      Handler: the_alchemiser.lambda_handler.lambda_handler
      Role: !GetAtt TradingSystemExecutionRole.Arn
      Layers:
        - !Ref DependenciesLayer
    Metadata:
      BuildMethod: python3.12
      BuildProperties:
        Exclude:
          - .git/**
          - .git*
          - .github/**
          - .aws-sam/**
          - .venv/**
          - .vscode/**
          - .idea/**
          - venv/**
          - env/**
          - .env*
          - .cache/**
          - .pytest_cache/**
          - .mypy_cache/**
          - .ruff_cache/**
          - '**/__pycache__/**'
          - '**/*.pyc'
          - dist/**
          - build/**
          - '**/*.egg-info/**'
          - tests/**
          - docs/**
          - logs/**
          - data/**
          - scripts/**
          - dependencies/**
          - '**/*.ipynb'
          - '**/*.png'
          - '**/*.jpg'
          - '**/*.svg'
          - '**/*.gif'
          - '**/*.pdf'
          - '**/*.csv'
          - CHANGELOG.md
          - README.md
          - logo.png
          - Makefile
          - .editorconfig
          - .pre-commit-config.yaml
          - poetry.lock
          - pyproject.toml
          - pytest.ini
          - sonar-project.properties

  # Dead Letter Queue for failed trading executions
  TradingSystemDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "the-alchemiser-dlq-${Stage}"
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 60

  # EventBridge Scheduler with proper timezone support and reduced retry policy
  TradingSystemSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub "the-alchemiser-daily-trading-${Stage}"
      Description: "Execute quantitative trading system daily at 9:35 AM New York time"
      ScheduleExpression: "cron(35 9 ? * MON-FRI *)"
      ScheduleExpressionTimezone: "America/New_York"
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt TradingSystemFunction.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        Input: |
          {
            "mode": "trade"
          }
        RetryPolicy:
          MaximumRetryAttempts: 1 # Reduced from default (185) to prevent excessive retries
        DeadLetterConfig:
          Arn: !GetAtt TradingSystemDLQ.Arn
      State: "ENABLED"

  # Monthly summary scheduler: runs on the 1st of each month at 00:05 UTC
  MonthlySummarySchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub "the-alchemiser-monthly-summary-${Stage}"
      Description: "Send monthly financial summary on the 1st (previous month)"
      ScheduleExpression: "cron(5 0 1 * ? *)"  # 00:05 UTC on day 1
      ScheduleExpressionTimezone: "UTC"
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt TradingSystemFunction.Arn
        RoleArn: !GetAtt SchedulerExecutionRole.Arn
        Input: |
          {
            "action": "monthly_summary"
          }
        RetryPolicy:
          MaximumRetryAttempts: 1
        DeadLetterConfig:
          Arn: !GetAtt TradingSystemDLQ.Arn
      State: "ENABLED"

  # IAM Role for EventBridge Scheduler to invoke Lambda
  SchedulerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SchedulerLambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt TradingSystemFunction.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt TradingSystemDLQ.Arn

  # IAM Role for Lambda execution
  TradingSystemExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TradingSystemPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # CloudWatch Logs (enhanced logging)
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: "*"
              
              # S3 access for trade ledger
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt TradeLedgerBucket.Arn
                  - !Sub "${TradeLedgerBucket.Arn}/*"


  # CloudWatch Log Group with retention
  TradingSystemLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/the-alchemiser-v2-lambda-${Stage}"
      RetentionInDays: 30

Outputs:
  TradingSystemFunctionArn:
    Description: "Quantitative Trading System Lambda Function ARN"
    Value: !GetAtt TradingSystemFunction.Arn

  TradingSystemLogGroupName:
    Description: "CloudWatch Log Group for monitoring"
    Value: !Sub "/aws/lambda/the-alchemiser-v2-lambda-${Stage}"

  TradeLedgerBucketName:
    Description: "S3 bucket for trade ledger persistence"
    Value: !Ref TradeLedgerBucket

  DeploymentStage:
    Description: "Deployed stage"
    Value: !Ref Stage
