{
  "scripts/update_imports_after_services_reorg.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "Change",
        "fields": [
          {
            "name": "path",
            "type": "Path"
          },
          {
            "name": "original",
            "type": "str"
          },
          {
            "name": "updated",
            "type": "str"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": [
      "sys",
      "pathlib"
    ]
  },
  "scripts/perform_services_reorg.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "Move",
        "fields": [
          {
            "name": "src",
            "type": "Path"
          },
          {
            "name": "dst",
            "type": "Path"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": [
      "sys",
      "pathlib"
    ]
  },
  "the_alchemiser/application/types.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "MultiStrategyExecutionResult",
        "fields": [
          {
            "name": "success",
            "type": "bool"
          },
          {
            "name": "strategy_signals",
            "type": "dict[StrategyType, StrategySignal]"
          },
          {
            "name": "consolidated_portfolio",
            "type": "dict[str, float]"
          },
          {
            "name": "orders_executed",
            "type": "list[OrderDetails]"
          },
          {
            "name": "account_info_before",
            "type": "AccountInfo"
          },
          {
            "name": "account_info_after",
            "type": "AccountInfo"
          },
          {
            "name": "execution_summary",
            "type": "dict[str, Any]"
          },
          {
            "name": "final_portfolio_state",
            "type": "dict[str, Any] | None"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/domain/registry/strategy_registry.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "StrategyConfig",
        "fields": [
          {
            "name": "strategy_type",
            "type": "StrategyType"
          },
          {
            "name": "engine_class",
            "type": "type"
          },
          {
            "name": "default_allocation",
            "type": "float"
          },
          {
            "name": "description",
            "type": "str"
          },
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/domain/models/strategy.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "StrategySignalModel",
        "fields": [
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "action",
            "type": "Literal['BUY', 'SELL', 'HOLD']"
          },
          {
            "name": "confidence",
            "type": "float"
          },
          {
            "name": "reasoning",
            "type": "str"
          },
          {
            "name": "allocation_percentage",
            "type": "float"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      },
      {
        "name": "StrategyPositionModel",
        "fields": [
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "quantity",
            "type": "float"
          },
          {
            "name": "entry_price",
            "type": "float"
          },
          {
            "name": "current_price",
            "type": "float"
          },
          {
            "name": "strategy_type",
            "type": "str"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/domain/models/market_data.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "BarModel",
        "fields": [
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "timestamp",
            "type": "datetime"
          },
          {
            "name": "open",
            "type": "float"
          },
          {
            "name": "high",
            "type": "float"
          },
          {
            "name": "low",
            "type": "float"
          },
          {
            "name": "close",
            "type": "float"
          },
          {
            "name": "volume",
            "type": "int"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      },
      {
        "name": "QuoteModel",
        "fields": [
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "bid_price",
            "type": "float"
          },
          {
            "name": "ask_price",
            "type": "float"
          },
          {
            "name": "bid_size",
            "type": "float"
          },
          {
            "name": "ask_size",
            "type": "float"
          },
          {
            "name": "timestamp",
            "type": "datetime"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      },
      {
        "name": "PriceDataModel",
        "fields": [
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "price",
            "type": "float"
          },
          {
            "name": "timestamp",
            "type": "datetime"
          },
          {
            "name": "bid",
            "type": "float | None"
          },
          {
            "name": "ask",
            "type": "float | None"
          },
          {
            "name": "volume",
            "type": "int | None"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/domain/models/position.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "PositionModel",
        "fields": [
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "qty",
            "type": "float"
          },
          {
            "name": "side",
            "type": "Literal['long', 'short']"
          },
          {
            "name": "market_value",
            "type": "float"
          },
          {
            "name": "cost_basis",
            "type": "float"
          },
          {
            "name": "unrealized_pl",
            "type": "float"
          },
          {
            "name": "unrealized_plpc",
            "type": "float"
          },
          {
            "name": "current_price",
            "type": "float"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/domain/models/order.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "OrderModel",
        "fields": [
          {
            "name": "id",
            "type": "str"
          },
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "qty",
            "type": "float"
          },
          {
            "name": "side",
            "type": "Literal['buy', 'sell']"
          },
          {
            "name": "order_type",
            "type": "Literal['market', 'limit', 'stop', 'stop_limit']"
          },
          {
            "name": "time_in_force",
            "type": "Literal['day', 'gtc', 'ioc', 'fok']"
          },
          {
            "name": "status",
            "type": "Literal['new', 'partially_filled', 'filled', 'canceled', 'expired', 'rejected']"
          },
          {
            "name": "filled_qty",
            "type": "float"
          },
          {
            "name": "filled_avg_price",
            "type": "float | None"
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/domain/models/account.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "AccountModel",
        "fields": [
          {
            "name": "account_id",
            "type": "str"
          },
          {
            "name": "equity",
            "type": "float"
          },
          {
            "name": "cash",
            "type": "float"
          },
          {
            "name": "buying_power",
            "type": "float"
          },
          {
            "name": "day_trades_remaining",
            "type": "int"
          },
          {
            "name": "portfolio_value",
            "type": "float"
          },
          {
            "name": "last_equity",
            "type": "float"
          },
          {
            "name": "daytrading_buying_power",
            "type": "float"
          },
          {
            "name": "regt_buying_power",
            "type": "float"
          },
          {
            "name": "status",
            "type": "Literal['ACTIVE', 'INACTIVE']"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      },
      {
        "name": "PortfolioHistoryModel",
        "fields": [
          {
            "name": "profit_loss",
            "type": "list[float]"
          },
          {
            "name": "profit_loss_pct",
            "type": "list[float]"
          },
          {
            "name": "equity",
            "type": "list[float]"
          },
          {
            "name": "timestamp",
            "type": "list[str]"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/domain/portfolio/rebalancing/rebalance_plan.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "RebalancePlan",
        "fields": [
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "current_weight",
            "type": "Decimal"
          },
          {
            "name": "target_weight",
            "type": "Decimal"
          },
          {
            "name": "weight_diff",
            "type": "Decimal"
          },
          {
            "name": "target_value",
            "type": "Decimal"
          },
          {
            "name": "current_value",
            "type": "Decimal"
          },
          {
            "name": "trade_amount",
            "type": "Decimal"
          },
          {
            "name": "needs_rebalance",
            "type": "bool"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/domain/portfolio/position/position_delta.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "PositionDelta",
        "fields": [
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "current_qty",
            "type": "Decimal"
          },
          {
            "name": "target_qty",
            "type": "Decimal"
          },
          {
            "name": "delta",
            "type": "Decimal"
          },
          {
            "name": "action",
            "type": "Literal['no_change', 'sell_excess', 'buy_more']"
          },
          {
            "name": "quantity",
            "type": "Decimal"
          },
          {
            "name": "message",
            "type": "str"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/services/trading/position_service.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "PositionInfo",
        "fields": [
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "quantity",
            "type": "float"
          },
          {
            "name": "market_value",
            "type": "float | None"
          },
          {
            "name": "unrealized_pnl",
            "type": "float | None"
          },
          {
            "name": "unrealized_pnl_percent",
            "type": "float | None"
          },
          {
            "name": "cost_basis",
            "type": "float | None"
          },
          {
            "name": "current_price",
            "type": "float | None"
          },
          {
            "name": "weight_percent",
            "type": "float | None"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "PortfolioSummary",
        "fields": [
          {
            "name": "total_market_value",
            "type": "float"
          },
          {
            "name": "total_positions",
            "type": "int"
          },
          {
            "name": "largest_position_value",
            "type": "float"
          },
          {
            "name": "largest_position_percent",
            "type": "float"
          },
          {
            "name": "cash_balance",
            "type": "float | None"
          },
          {
            "name": "total_equity",
            "type": "float | None"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/infrastructure/data_providers/real_time_pricing.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "RealTimeQuote",
        "fields": [
          {
            "name": "bid",
            "type": "float"
          },
          {
            "name": "ask",
            "type": "float"
          },
          {
            "name": "last_price",
            "type": "float"
          },
          {
            "name": "timestamp",
            "type": "datetime"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/infrastructure/config/execution_config.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "ExecutionConfig",
        "fields": [
          {
            "name": "max_slippage_bps",
            "type": "float"
          },
          {
            "name": "aggressive_timeout_seconds",
            "type": "float"
          },
          {
            "name": "max_repegs",
            "type": "int"
          },
          {
            "name": "enable_premarket_assessment",
            "type": "bool"
          },
          {
            "name": "market_open_fast_execution",
            "type": "bool"
          },
          {
            "name": "tight_spread_threshold",
            "type": "float"
          },
          {
            "name": "wide_spread_threshold",
            "type": "float"
          },
          {
            "name": "leveraged_etf_symbols",
            "type": "list[str] | None"
          },
          {
            "name": "high_volume_etfs",
            "type": "list[str] | None"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/infrastructure/config/config.py": {
    "pydantic_models": [
      {
        "name": "LoggingSettings",
        "fields": [
          {
            "name": "level",
            "type": "str"
          }
        ],
        "validators": [],
        "bases": [
          "BaseModel"
        ],
        "decorators": []
      },
      {
        "name": "AlpacaSettings",
        "fields": [
          {
            "name": "endpoint",
            "type": "str"
          },
          {
            "name": "paper_endpoint",
            "type": "str"
          },
          {
            "name": "cash_reserve_pct",
            "type": "float"
          },
          {
            "name": "slippage_bps",
            "type": "int"
          },
          {
            "name": "enable_websocket_orders",
            "type": "bool"
          }
        ],
        "validators": [],
        "bases": [
          "BaseModel"
        ],
        "decorators": []
      },
      {
        "name": "AwsSettings",
        "fields": [
          {
            "name": "region",
            "type": "str"
          },
          {
            "name": "account_id",
            "type": "str"
          },
          {
            "name": "repo_name",
            "type": "str"
          },
          {
            "name": "lambda_arn",
            "type": "str"
          },
          {
            "name": "image_tag",
            "type": "str"
          }
        ],
        "validators": [],
        "bases": [
          "BaseModel"
        ],
        "decorators": []
      },
      {
        "name": "AlertsSettings",
        "fields": [
          {
            "name": "alert_config_s3",
            "type": "str"
          },
          {
            "name": "cooldown_minutes",
            "type": "int"
          }
        ],
        "validators": [],
        "bases": [
          "BaseModel"
        ],
        "decorators": []
      },
      {
        "name": "SecretsManagerSettings",
        "fields": [
          {
            "name": "region_name",
            "type": "str"
          },
          {
            "name": "secret_name",
            "type": "str"
          }
        ],
        "validators": [],
        "bases": [
          "BaseModel"
        ],
        "decorators": []
      },
      {
        "name": "StrategySettings",
        "fields": [
          {
            "name": "default_strategy_allocations",
            "type": "dict[str, float]"
          },
          {
            "name": "poll_timeout",
            "type": "int"
          },
          {
            "name": "poll_interval",
            "type": "float"
          }
        ],
        "validators": [],
        "bases": [
          "BaseModel"
        ],
        "decorators": []
      },
      {
        "name": "EmailSettings",
        "fields": [
          {
            "name": "smtp_server",
            "type": "str"
          },
          {
            "name": "smtp_port",
            "type": "int"
          },
          {
            "name": "from_email",
            "type": "str | None"
          },
          {
            "name": "to_email",
            "type": "str | None"
          },
          {
            "name": "neutral_mode",
            "type": "bool"
          }
        ],
        "validators": [],
        "bases": [
          "BaseModel"
        ],
        "decorators": []
      },
      {
        "name": "DataSettings",
        "fields": [
          {
            "name": "cache_duration",
            "type": "int"
          },
          {
            "name": "default_symbol",
            "type": "str"
          }
        ],
        "validators": [],
        "bases": [
          "BaseModel"
        ],
        "decorators": []
      },
      {
        "name": "TrackingSettings",
        "fields": [
          {
            "name": "s3_bucket",
            "type": "str"
          },
          {
            "name": "strategy_orders_path",
            "type": "str"
          },
          {
            "name": "strategy_positions_path",
            "type": "str"
          },
          {
            "name": "strategy_pnl_history_path",
            "type": "str"
          },
          {
            "name": "order_history_limit",
            "type": "int"
          }
        ],
        "validators": [],
        "bases": [
          "BaseModel"
        ],
        "decorators": []
      },
      {
        "name": "ExecutionSettings",
        "fields": [
          {
            "name": "max_slippage_bps",
            "type": "float"
          },
          {
            "name": "aggressive_timeout_seconds",
            "type": "float"
          },
          {
            "name": "max_repegs",
            "type": "int"
          },
          {
            "name": "enable_premarket_assessment",
            "type": "bool"
          },
          {
            "name": "market_open_fast_execution",
            "type": "bool"
          },
          {
            "name": "tight_spread_threshold",
            "type": "float"
          },
          {
            "name": "wide_spread_threshold",
            "type": "float"
          },
          {
            "name": "leveraged_etf_symbols",
            "type": "list[str]"
          },
          {
            "name": "high_volume_etfs",
            "type": "list[str]"
          }
        ],
        "validators": [],
        "bases": [
          "BaseModel"
        ],
        "decorators": []
      }
    ],
    "dataclasses": [],
    "other_structs": [],
    "io_edges": [
      "pydantic"
    ]
  },
  "the_alchemiser/application/orders/progressive_order_utils.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "OrderExecutionParams",
        "fields": [
          {
            "name": "max_wait_seconds",
            "type": "int"
          },
          {
            "name": "step_count",
            "type": "int"
          },
          {
            "name": "step_percentages",
            "type": "list[float]"
          },
          {
            "name": "tick_aggressiveness",
            "type": "float"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/application/orders/order_validation.py": {
    "pydantic_models": [
      {
        "name": "ValidatedOrder",
        "fields": [
          {
            "name": "id",
            "type": "str | None"
          },
          {
            "name": "client_order_id",
            "type": "str | None"
          },
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "quantity",
            "type": "Decimal"
          },
          {
            "name": "side",
            "type": "ValidatedOrderSide"
          },
          {
            "name": "order_type",
            "type": "ValidatedOrderType"
          },
          {
            "name": "time_in_force",
            "type": "str"
          },
          {
            "name": "limit_price",
            "type": "Decimal | None"
          },
          {
            "name": "stop_price",
            "type": "Decimal | None"
          },
          {
            "name": "status",
            "type": "OrderStatus"
          },
          {
            "name": "filled_qty",
            "type": "Decimal"
          },
          {
            "name": "filled_avg_price",
            "type": "Decimal | None"
          },
          {
            "name": "created_at",
            "type": "datetime"
          },
          {
            "name": "updated_at",
            "type": "datetime"
          },
          {
            "name": "estimated_value",
            "type": "Decimal | None"
          },
          {
            "name": "risk_checks_passed",
            "type": "bool"
          },
          {
            "name": "validation_errors",
            "type": "list[str]"
          }
        ],
        "validators": [
          {
            "name": "validate_symbol",
            "decorator": "validator('symbol')"
          },
          {
            "name": "validate_limit_price",
            "decorator": "validator('limit_price')"
          },
          {
            "name": "validate_stop_price",
            "decorator": "validator('stop_price')"
          },
          {
            "name": "validate_filled_qty",
            "decorator": "validator('filled_qty')"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": []
      }
    ],
    "dataclasses": [
      {
        "name": "RiskLimits",
        "fields": [
          {
            "name": "max_position_pct",
            "type": "float"
          },
          {
            "name": "max_portfolio_concentration",
            "type": "float"
          },
          {
            "name": "max_order_value",
            "type": "float"
          },
          {
            "name": "min_order_value",
            "type": "float"
          },
          {
            "name": "max_daily_trades",
            "type": "int"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ]
      },
      {
        "name": "ValidationResult",
        "fields": [
          {
            "name": "is_valid",
            "type": "bool"
          },
          {
            "name": "errors",
            "type": "list[str]"
          },
          {
            "name": "warnings",
            "type": "list[str]"
          },
          {
            "name": "validated_order",
            "type": "ValidatedOrder | None"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "SettlementResult",
        "fields": [
          {
            "name": "success",
            "type": "bool"
          },
          {
            "name": "settled_orders",
            "type": "list[ValidatedOrder]"
          },
          {
            "name": "failed_orders",
            "type": "list[ValidatedOrder]"
          },
          {
            "name": "timeout_orders",
            "type": "list[ValidatedOrder]"
          },
          {
            "name": "errors",
            "type": "list[str]"
          },
          {
            "name": "settlement_time_seconds",
            "type": "float"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": [
      "pydantic"
    ]
  },
  "the_alchemiser/application/tracking/strategy_order_tracker.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "StrategyOrder",
        "fields": [
          {
            "name": "order_id",
            "type": "str"
          },
          {
            "name": "strategy",
            "type": "str"
          },
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "side",
            "type": "str"
          },
          {
            "name": "quantity",
            "type": "float"
          },
          {
            "name": "price",
            "type": "float"
          },
          {
            "name": "timestamp",
            "type": "str"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "StrategyPosition",
        "fields": [
          {
            "name": "strategy",
            "type": "str"
          },
          {
            "name": "symbol",
            "type": "str"
          },
          {
            "name": "quantity",
            "type": "float"
          },
          {
            "name": "average_cost",
            "type": "float"
          },
          {
            "name": "total_cost",
            "type": "float"
          },
          {
            "name": "last_updated",
            "type": "str"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "StrategyPnL",
        "fields": [
          {
            "name": "strategy",
            "type": "str"
          },
          {
            "name": "realized_pnl",
            "type": "float"
          },
          {
            "name": "unrealized_pnl",
            "type": "float"
          },
          {
            "name": "total_pnl",
            "type": "float"
          },
          {
            "name": "positions",
            "type": "dict[str, float]"
          },
          {
            "name": "allocation_value",
            "type": "float"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  },
  "the_alchemiser/application/execution/spread_assessment.py": {
    "pydantic_models": [],
    "dataclasses": [
      {
        "name": "PreMarketConditions",
        "fields": [
          {
            "name": "spread_cents",
            "type": "float"
          },
          {
            "name": "spread_quality",
            "type": "SpreadQuality"
          },
          {
            "name": "recommended_wait_minutes",
            "type": "int"
          },
          {
            "name": "max_slippage_bps",
            "type": "float"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      },
      {
        "name": "SpreadAnalysis",
        "fields": [
          {
            "name": "spread_cents",
            "type": "float"
          },
          {
            "name": "spread_quality",
            "type": "SpreadQuality"
          },
          {
            "name": "spread_bps",
            "type": "float"
          },
          {
            "name": "midpoint",
            "type": "float"
          }
        ],
        "validators": [],
        "bases": [],
        "decorators": [
          "dataclass"
        ]
      }
    ],
    "other_structs": [],
    "io_edges": []
  }
}