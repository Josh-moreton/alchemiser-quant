name: Manual Deploy Ephemeral

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy (will be sanitized for stack name)'
        required: true
        type: string
      ttl_hours:
        description: 'TTL in hours for auto-cleanup (default: 24)'
        required: false
        type: number
        default: 24
      stack_suffix:
        description: 'Optional stack suffix override (for long branch names)'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_PAGER: ""
  STACK_BASENAME: "alchemiser"

jobs:
  deploy-ephemeral:
    runs-on: ubuntu-latest
    environment: dev
    # Prevent concurrent ephemeral deploys to the same branch
    concurrency:
      group: ephemeral-deploy-${{ inputs.branch }}
      cancel-in-progress: false

    steps:
      - name: Validate branch name
        id: validate
        run: |
          BRANCH="${{ inputs.branch }}"
          
          # Block main, prod, production branches
          if [[ "$BRANCH" =~ ^(main|prod|production)$ ]]; then
            echo "‚ùå ERROR: Cannot deploy ephemeral stack from protected branch: $BRANCH"
            echo "üí° Ephemeral deploys are only for feature branches"
            exit 1
          fi
          
          echo "‚úÖ Branch validation passed: $BRANCH"

      - name: Checkout branch
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.branch }}

      - name: Generate stack name
        id: stack_name
        run: |
          BRANCH="${{ inputs.branch }}"
          STACK_SUFFIX="${{ inputs.stack_suffix }}"
          
          # Get short SHA (first 7 characters)
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          
          # Sanitize branch name: lowercase, replace special chars with dash, truncate
          if [ -n "$STACK_SUFFIX" ]; then
            # Use provided suffix
            SAFE_BRANCH="$STACK_SUFFIX"
          else
            # Sanitize: lowercase, replace /._@ with -, remove other special chars, truncate
            SAFE_BRANCH=$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' | sed 's/[\/\._@]/-/g' | sed 's/[^a-z0-9-]//g' | cut -c1-40)
            # Remove leading/trailing dashes
            SAFE_BRANCH=$(echo "$SAFE_BRANCH" | sed 's/^-*//' | sed 's/-*$//')
          fi
          
          echo "safe_branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT
          
          # Construct stack name: {basename}-ephem-{safe-branch}-{short-sha}
          STACK_NAME="${STACK_BASENAME}-ephem-${SAFE_BRANCH}-${SHORT_SHA}"
          
          # Validate length (CloudFormation limit is 128 chars)
          if [ ${#STACK_NAME} -gt 128 ]; then
            echo "‚ùå ERROR: Stack name too long (${#STACK_NAME} chars): $STACK_NAME"
            echo "üí° Use stack_suffix input to provide a shorter name"
            exit 1
          fi
          
          echo "stack_name=$STACK_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Generated stack name: $STACK_NAME (${#STACK_NAME} chars)"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Build
        run: sam build --use-container --parallel --config-env ephemeral

      - name: Prepare environment variables
        env:
          ALPACA_KEY: ${{ secrets.ALPACA_KEY }}
          ALPACA_SECRET: ${{ secrets.ALPACA_SECRET }}
          ALPACA_ENDPOINT: ${{ vars.ALPACA_ENDPOINT }}
          EMAIL__PASSWORD: ${{ secrets.EMAIL__PASSWORD }}
          LOGGING__LEVEL: ${{ vars.LOGGING__LEVEL }}
          ALCHEMISER_DSL_MAX_WORKERS: ${{ vars.ALCHEMISER_DSL_MAX_WORKERS }}
        run: |
          echo "Exporting ephemeral env vars"
          echo "ALPACA_KEY=$ALPACA_KEY" >> $GITHUB_ENV
          echo "ALPACA_SECRET=$ALPACA_SECRET" >> $GITHUB_ENV
          if [ -n "$ALPACA_ENDPOINT" ]; then echo "ALPACA_ENDPOINT=$ALPACA_ENDPOINT" >> $GITHUB_ENV; fi
          if [ -n "$EMAIL__PASSWORD" ]; then echo "EMAIL__PASSWORD=$EMAIL__PASSWORD" >> $GITHUB_ENV; fi
          if [ -n "$LOGGING__LEVEL" ]; then echo "LOGGING__LEVEL=$LOGGING__LEVEL" >> $GITHUB_ENV; fi
          if [ -n "$ALCHEMISER_DSL_MAX_WORKERS" ]; then echo "ALCHEMISER_DSL_MAX_WORKERS=$ALCHEMISER_DSL_MAX_WORKERS" >> $GITHUB_ENV; fi

      - name: Deploy ephemeral stack
        env:
          STACK_NAME: ${{ steps.stack_name.outputs.stack_name }}
          SAFE_BRANCH: ${{ steps.stack_name.outputs.safe_branch }}
          SHORT_SHA: ${{ steps.stack_name.outputs.short_sha }}
          TTL_HOURS: ${{ inputs.ttl_hours }}
          BRANCH_NAME: ${{ inputs.branch }}
        run: |
          echo "üöÄ Deploying ephemeral stack: $STACK_NAME"
          
          ALPACA_ENDPOINT_PARAM=${ALPACA_ENDPOINT:-"https://paper-api.alpaca.markets/v2"}
          EMAIL_PASSWORD_PARAM=${EMAIL__PASSWORD:-""}
          
          PARAMS=(
            "Stage=ephemeral"
            "StackName=$STACK_NAME"
            "Env=ephemeral"
            "ArtifactPrefix=$STACK_NAME"
            "AlpacaKey=$ALPACA_KEY"
            "AlpacaSecret=$ALPACA_SECRET"
            "AlpacaEndpoint=$ALPACA_ENDPOINT_PARAM"
            "LoggingLevel=${LOGGING__LEVEL:-INFO}"
            "DslMaxWorkers=${ALCHEMISER_DSL_MAX_WORKERS:-7}"
          )
          
          if [[ -n "$EMAIL_PASSWORD_PARAM" ]]; then
            PARAMS+=("EmailPassword=$EMAIL_PASSWORD_PARAM")
          fi
          
          # Build tags for the stack
          TAGS=(
            "Ephemeral=true"
            "Branch=$BRANCH_NAME"
            "SafeBranch=$SAFE_BRANCH"
            "ShortSHA=$SHORT_SHA"
            "TTLHours=$TTL_HOURS"
            "CreatedBy=GitHubActions"
            "WorkflowRun=${{ github.run_id }}"
          )
          
          sam deploy \
            --stack-name "$STACK_NAME" \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --resolve-s3 \
            --parameter-overrides "${PARAMS[@]}" \
            --tags "${TAGS[@]}"
          
          echo ""
          echo "‚úÖ Ephemeral stack deployed successfully!"
          echo "üìã Stack name: $STACK_NAME"
          echo "üåø Branch: $BRANCH_NAME"
          echo "üîñ Commit: $SHORT_SHA"
          echo "‚è∞ TTL: $TTL_HOURS hours"
          echo ""
          echo "üóëÔ∏è  To destroy this stack, run the 'Manual Destroy Ephemeral' workflow with:"
          echo "   stack_name: $STACK_NAME"

      - name: Display stack outputs
        env:
          STACK_NAME: ${{ steps.stack_name.outputs.stack_name }}
        run: |
          echo "üìä Stack outputs:"
          aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query 'Stacks[0].Outputs' \
            --output table || echo "No outputs available yet"
