name: Migration PR Checks

on:
  pull_request:
    branches:
      - 'migration/modular-split'
      - 'migration/modular-split/**'
  push:
    branches:
      - 'migration/modular-split'
      - 'migration/modular-split/**'

permissions:
  contents: read
  pull-requests: read

jobs:
  migration-validation:
    runs-on: ubuntu-latest
    name: "Migration: Type Check, Import Rules & Smoke Tests"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Python 3.12
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Cache Poetry installation
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pipx
            ~/.local/pipx/venvs/poetry
          key: ${{ runner.os }}-poetry-v2

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip pipx
          python -m pipx install poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          poetry config installer.max-workers 10

      - name: Cache virtualenv
        id: venv-cache
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-ansi

      - name: Set safe environment for testing
        run: |
          echo "PAPER_TRADING=true" >> $GITHUB_ENV
          echo "LOGGING__LEVEL=INFO" >> $GITHUB_ENV
          echo "PYTHONUNBUFFERED=1" >> $GITHUB_ENV

      - name: Verify environment
        run: |
          poetry run python -c "import sys; print('Python:', sys.version.split()[0])"
          poetry run python -c "import the_alchemiser; print('Alchemiser import: OK')"

      - name: Run MyPy type checking
        id: mypy-check
        run: |
          echo "Running MyPy type checking on modular architecture..."
          poetry run mypy the_alchemiser/shared/ the_alchemiser/strategy/ the_alchemiser/portfolio/ the_alchemiser/execution/ --no-error-summary || {
            echo "::warning::MyPy found type issues. See output above for details."
            echo "mypy_failed=true" >> $GITHUB_OUTPUT
          }

      - name: Run import-linter checks
        id: import-check
        run: |
          echo "Checking module dependency rules..."
          poetry run lint-imports || {
            echo "::error::Import dependency violations found! See output above."
            exit 1
          }

      - name: Basic functionality check
        id: basic-check
        run: |
          echo "Running basic functionality checks..."
          poetry run python -c "from the_alchemiser.shared.cli import cli; print('CLI import: OK')" || {
            echo "::warning::Basic functionality check failed."
            echo "basic_check_failed=true" >> $GITHUB_OUTPUT
          }

      - name: Migration validation summary
        run: |
          echo "## Migration Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.import-check.outcome }}" = "success" ]; then
            echo "✅ **Import Rules**: PASSED - Module dependencies respected" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Import Rules**: FAILED - Dependency violations found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.mypy-check.outputs.mypy_failed }}" != "true" ]; then
            echo "✅ **Type Checking**: PASSED - No type errors in modular code" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Type Checking**: WARNINGS - Type issues found (see logs)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.basic-check.outputs.basic_check_failed }}" != "true" ]; then
            echo "✅ **Basic Checks**: PASSED - Core functionality working" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Basic Checks**: WARNINGS - Some checks failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Import Rules Enforcement**: Only shared module isolation is currently enforced." >> $GITHUB_STEP_SUMMARY
          echo "Additional rules will be progressively enabled as migration advances." >> $GITHUB_STEP_SUMMARY

  # Additional job for comprehensive analysis (non-blocking)
  migration-analysis:
    runs-on: ubuntu-latest
    name: "Migration: Comprehensive Analysis"
    continue-on-error: true
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Python 3.12
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Install Poetry and dependencies
        run: |
          python -m pip install --upgrade pip pipx
          python -m pipx install poetry
          poetry install --no-interaction

      - name: Full MyPy analysis
        id: full-mypy
        continue-on-error: true
        run: |
          echo "Running full MyPy analysis..."
          poetry run mypy the_alchemiser/ --no-error-summary > mypy-full-report.txt 2>&1 || true
          echo "Full MyPy report generated"

      - name: Import violations analysis  
        id: import-analysis
        continue-on-error: true
        run: |
          # Enable all import rules temporarily to see full violation list
          sed -i 's/^# \[\[tool\.importlinter\.contracts\]\]/[[tool.importlinter.contracts]]/' pyproject.toml
          sed -i 's/^# name/name/' pyproject.toml
          sed -i 's/^# type/type/' pyproject.toml
          sed -i 's/^# source_modules/source_modules/' pyproject.toml
          sed -i 's/^# forbidden_modules/forbidden_modules/' pyproject.toml
          sed -i 's/^# layers/layers/' pyproject.toml
          
          echo "Analyzing all import violations..."
          poetry run lint-imports > import-violations-full.txt 2>&1 || true
          echo "Full import analysis completed"

      - name: Upload analysis reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: migration-analysis-reports
          path: |
            mypy-full-report.txt
            import-violations-full.txt
          retention-days: 30