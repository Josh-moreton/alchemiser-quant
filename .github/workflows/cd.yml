name: CD

on:
  # Gate dev deployment on CI success for main
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches: [main]
  # Allow prod deployments on release publish
  release:
    types: [published]
  # Allow manual deploys for either environment
  workflow_dispatch:
    inputs:
      environment:
        description: Which environment to deploy
        required: true
        default: dev
        type: choice
        options: [dev, prod]

permissions:
  id-token: write
  contents: read

env:
  AWS_PAGER: ""

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'release' && 'prod' || (github.event_name == 'workflow_dispatch' && inputs.environment || 'dev') }}
    # Ensure only one deploy per environment runs at a time
    concurrency:
      group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref || inputs.environment }}
      cancel-in-progress: true

    steps:
      - name: Checkout correct commit
        uses: actions/checkout@v4
        with:
          # For workflow_run, use the commit from the CI run; else default to HEAD
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || '' }}

      - name: Decide target environment
        id: target
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            # Only proceed if CI concluded successfully
            if [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
              echo "CI did not succeed; skipping CD.";
              exit 1;
            fi
            echo "env=dev" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "env=dev" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Build (matching target env)
        run: sam build --parallel --config-env "${{ steps.target.outputs.env }}"

      - name: Prepare environment variables (dev)
        if: steps.target.outputs.env == 'dev'
        env:
          ALPACA_KEY: ${{ secrets.ALPACA_KEY }}
          ALPACA_SECRET: ${{ secrets.ALPACA_SECRET }}
          ALPACA_ENDPOINT: ${{ vars.ALPACA_ENDPOINT }}
          LOGGING__LEVEL: ${{ vars.LOGGING__LEVEL }}
          ALCHEMISER_DSL_PARALLELISM: ${{ vars.ALCHEMISER_DSL_PARALLELISM }}
          ALCHEMISER_DSL_MAX_WORKERS: ${{ vars.ALCHEMISER_DSL_MAX_WORKERS }}
          STRATEGY__DSL_FILES: ${{ vars.STRATEGY__DSL_FILES }}
          STRATEGY__DSL_ALLOCATIONS: ${{ vars.STRATEGY__DSL_ALLOCATIONS }}
        run: |
          echo "Exporting dev ALPACA_* env vars for deploy.sh"
          echo "ALPACA_KEY=$ALPACA_KEY" >> $GITHUB_ENV
          echo "ALPACA_SECRET=$ALPACA_SECRET" >> $GITHUB_ENV
          if [ -n "$ALPACA_ENDPOINT" ]; then echo "ALPACA_ENDPOINT=$ALPACA_ENDPOINT" >> $GITHUB_ENV; fi
          # Non-secret runtime config
          if [ -n "$LOGGING__LEVEL" ]; then echo "LOGGING__LEVEL=$LOGGING__LEVEL" >> $GITHUB_ENV; fi
          if [ -n "$ALCHEMISER_DSL_PARALLELISM" ]; then echo "ALCHEMISER_DSL_PARALLELISM=$ALCHEMISER_DSL_PARALLELISM" >> $GITHUB_ENV; fi
          if [ -n "$ALCHEMISER_DSL_MAX_WORKERS" ]; then echo "ALCHEMISER_DSL_MAX_WORKERS=$ALCHEMISER_DSL_MAX_WORKERS" >> $GITHUB_ENV; fi
          # Validate/compact JSON to single-line to avoid parsing issues
          if [ -n "$STRATEGY__DSL_FILES" ]; then
            if command -v jq >/dev/null 2>&1; then
              DSL_FILES_MIN=$(printf '%s' "$STRATEGY__DSL_FILES" | jq -c .) || { echo "Invalid JSON in STRATEGY__DSL_FILES"; exit 1; }
              echo "STRATEGY__DSL_FILES=$DSL_FILES_MIN" >> $GITHUB_ENV
            else
              echo "STRATEGY__DSL_FILES=$(echo "$STRATEGY__DSL_FILES" | tr -d '\n')" >> $GITHUB_ENV
            fi
          fi
          if [ -n "$STRATEGY__DSL_ALLOCATIONS" ]; then
            if command -v jq >/dev/null 2>&1; then
              DSL_ALLOCS_MIN=$(printf '%s' "$STRATEGY__DSL_ALLOCATIONS" | jq -c .) || { echo "Invalid JSON in STRATEGY__DSL_ALLOCATIONS"; exit 1; }
              echo "STRATEGY__DSL_ALLOCATIONS=$DSL_ALLOCS_MIN" >> $GITHUB_ENV
            else
              echo "STRATEGY__DSL_ALLOCATIONS=$(echo "$STRATEGY__DSL_ALLOCATIONS" | tr -d '\n')" >> $GITHUB_ENV
            fi
          fi

      - name: Prepare environment variables (prod)
        if: steps.target.outputs.env == 'prod'
        env:
          ALPACA_KEY: ${{ secrets.ALPACA_KEY }}
          ALPACA_SECRET: ${{ secrets.ALPACA_SECRET }}
          ALPACA_ENDPOINT: ${{ vars.ALPACA_ENDPOINT }}
          EMAIL__PASSWORD: ${{ secrets.EMAIL__PASSWORD }}
          LOGGING__LEVEL: ${{ vars.LOGGING__LEVEL }}
          ALCHEMISER_DSL_PARALLELISM: ${{ vars.ALCHEMISER_DSL_PARALLELISM }}
          ALCHEMISER_DSL_MAX_WORKERS: ${{ vars.ALCHEMISER_DSL_MAX_WORKERS }}
          STRATEGY__DSL_FILES: ${{ vars.STRATEGY__DSL_FILES }}
          STRATEGY__DSL_ALLOCATIONS: ${{ vars.STRATEGY__DSL_ALLOCATIONS }}
        run: |
          echo "Exporting prod ALPACA_* env vars for deploy.sh"
          echo "ALPACA_KEY=$ALPACA_KEY" >> $GITHUB_ENV
          echo "ALPACA_SECRET=$ALPACA_SECRET" >> $GITHUB_ENV
          if [ -n "$ALPACA_ENDPOINT" ]; then echo "ALPACA_ENDPOINT=$ALPACA_ENDPOINT" >> $GITHUB_ENV; fi
          if [ -n "$EMAIL__PASSWORD" ]; then echo "EMAIL__PASSWORD=$EMAIL__PASSWORD" >> $GITHUB_ENV; fi
          # Non-secret runtime config
          if [ -n "$LOGGING__LEVEL" ]; then echo "LOGGING__LEVEL=$LOGGING__LEVEL" >> $GITHUB_ENV; fi
          if [ -n "$ALCHEMISER_DSL_PARALLELISM" ]; then echo "ALCHEMISER_DSL_PARALLELISM=$ALCHEMISER_DSL_PARALLELISM" >> $GITHUB_ENV; fi
          if [ -n "$ALCHEMISER_DSL_MAX_WORKERS" ]; then echo "ALCHEMISER_DSL_MAX_WORKERS=$ALCHEMISER_DSL_MAX_WORKERS" >> $GITHUB_ENV; fi
          # Validate/compact JSON to single-line to avoid parsing issues
          if [ -n "$STRATEGY__DSL_FILES" ]; then
            if command -v jq >/dev/null 2>&1; then
              DSL_FILES_MIN=$(printf '%s' "$STRATEGY__DSL_FILES" | jq -c .) || { echo "Invalid JSON in STRATEGY__DSL_FILES"; exit 1; }
              echo "STRATEGY__DSL_FILES=$DSL_FILES_MIN" >> $GITHUB_ENV
            else
              echo "STRATEGY__DSL_FILES=$(echo "$STRATEGY__DSL_FILES" | tr -d '\n')" >> $GITHUB_ENV
            fi
          fi
          if [ -n "$STRATEGY__DSL_ALLOCATIONS" ]; then
            if command -v jq >/dev/null 2>&1; then
              DSL_ALLOCS_MIN=$(printf '%s' "$STRATEGY__DSL_ALLOCATIONS" | jq -c .) || { echo "Invalid JSON in STRATEGY__DSL_ALLOCATIONS"; exit 1; }
              echo "STRATEGY__DSL_ALLOCATIONS=$DSL_ALLOCS_MIN" >> $GITHUB_ENV
            else
              echo "STRATEGY__DSL_ALLOCATIONS=$(echo "$STRATEGY__DSL_ALLOCATIONS" | tr -d '\n')" >> $GITHUB_ENV
            fi
          fi

      - name: Deploy
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh "${{ steps.target.outputs.env }}"
