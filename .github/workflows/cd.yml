name: CD

on:
  # Prod deployments triggered by version tags (v*.*.*)
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+'
  # Allow manual deploys for either environment
  workflow_dispatch:
    inputs:
      environment:
        description: Which environment to deploy
        required: true
        default: dev
        type: choice
        options: [dev, prod]

permissions:
  id-token: write
  contents: read

env:
  AWS_PAGER: ""

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ contains(github.ref_name, 'beta') && 'dev' || (github.event_name == 'workflow_dispatch' && inputs.environment || 'prod') }}
    # Ensure only one deploy per environment runs at a time
    concurrency:
      group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref || inputs.environment }}
      cancel-in-progress: true

    steps:
      - name: Checkout correct commit
        uses: actions/checkout@v5

      - name: Decide target environment
        id: target
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Tag-based deployment
            if [[ "${{ github.ref_name }}" == *"beta"* ]]; then
              echo "env=dev" >> $GITHUB_OUTPUT
              echo "Deploying beta tag ${{ github.ref_name }} to dev"
            else
              echo "env=prod" >> $GITHUB_OUTPUT
              echo "Deploying release tag ${{ github.ref_name }} to prod"
            fi
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "env=dev" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Build (matching target env)
        run: sam build --use-container --parallel --config-env "${{ steps.target.outputs.env }}"

      - name: Prepare environment variables (dev)
        if: steps.target.outputs.env == 'dev'
        env:
          ALPACA_KEY: ${{ secrets.ALPACA_KEY }}
          ALPACA_SECRET: ${{ secrets.ALPACA_SECRET }}
          ALPACA_ENDPOINT: ${{ vars.ALPACA_ENDPOINT }}
          EMAIL__PASSWORD: ${{ secrets.EMAIL__PASSWORD }}
          LOGGING__LEVEL: ${{ vars.LOGGING__LEVEL }}
          ALCHEMISER_DSL_MAX_WORKERS: ${{ vars.ALCHEMISER_DSL_MAX_WORKERS }}
          # Strategy config now packaged with code; no JSON vars required
        run: |
          echo "Exporting dev ALPACA_* env vars for deploy.sh"
          echo "ALPACA_KEY=$ALPACA_KEY" >> $GITHUB_ENV
          echo "ALPACA_SECRET=$ALPACA_SECRET" >> $GITHUB_ENV
          if [ -n "$ALPACA_ENDPOINT" ]; then echo "ALPACA_ENDPOINT=$ALPACA_ENDPOINT" >> $GITHUB_ENV; fi
          if [ -n "$EMAIL__PASSWORD" ]; then echo "EMAIL__PASSWORD=$EMAIL__PASSWORD" >> $GITHUB_ENV; fi
          # Non-secret runtime config
          if [ -n "$LOGGING__LEVEL" ]; then echo "LOGGING__LEVEL=$LOGGING__LEVEL" >> $GITHUB_ENV; fi
          if [ -n "$ALCHEMISER_DSL_MAX_WORKERS" ]; then echo "ALCHEMISER_DSL_MAX_WORKERS=$ALCHEMISER_DSL_MAX_WORKERS" >> $GITHUB_ENV; fi
          # No strategy DSL JSON to export; handled by packaged config files

      - name: Prepare environment variables (prod)
        if: steps.target.outputs.env == 'prod'
        env:
          ALPACA_KEY: ${{ secrets.ALPACA_KEY }}
          ALPACA_SECRET: ${{ secrets.ALPACA_SECRET }}
          ALPACA_ENDPOINT: ${{ vars.ALPACA_ENDPOINT }}
          EMAIL__PASSWORD: ${{ secrets.EMAIL__PASSWORD }}
          LOGGING__LEVEL: ${{ vars.LOGGING__LEVEL }}
          ALCHEMISER_DSL_MAX_WORKERS: ${{ vars.ALCHEMISER_DSL_MAX_WORKERS }}
          # Strategy config now packaged with code; no JSON vars required
        run: |
          echo "Exporting prod ALPACA_* env vars for deploy.sh"
          echo "ALPACA_KEY=$ALPACA_KEY" >> $GITHUB_ENV
          echo "ALPACA_SECRET=$ALPACA_SECRET" >> $GITHUB_ENV
          if [ -n "$ALPACA_ENDPOINT" ]; then echo "ALPACA_ENDPOINT=$ALPACA_ENDPOINT" >> $GITHUB_ENV; fi
          if [ -n "$EMAIL__PASSWORD" ]; then echo "EMAIL__PASSWORD=$EMAIL__PASSWORD" >> $GITHUB_ENV; fi
          # Non-secret runtime config
          if [ -n "$LOGGING__LEVEL" ]; then echo "LOGGING__LEVEL=$LOGGING__LEVEL" >> $GITHUB_ENV; fi
          if [ -n "$ALCHEMISER_DSL_MAX_WORKERS" ]; then echo "ALCHEMISER_DSL_MAX_WORKERS=$ALCHEMISER_DSL_MAX_WORKERS" >> $GITHUB_ENV; fi
          # No strategy DSL JSON to export; handled by packaged config files

      - name: Deploy
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh "${{ steps.target.outputs.env }}"
