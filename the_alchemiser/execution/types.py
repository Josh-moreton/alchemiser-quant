"""Type definitions for the execution package."""

from dataclasses import dataclass
from typing import Dict, List, Optional, Any
from the_alchemiser.core.trading.strategy_manager import StrategyType


@dataclass
class MultiStrategyExecutionResult:
    """Result container for multi-strategy execution.
    
    Attributes:
        success (bool): Whether the execution completed successfully.
        strategy_signals (Dict[StrategyType, Any]): Signals generated by each strategy.
        consolidated_portfolio (Dict[str, float]): Final consolidated portfolio weights.
        orders_executed (List[Dict]): List of orders that were executed.
        account_info_before (Dict): Account information before execution.
        account_info_after (Dict): Account information after execution.
        execution_summary (Dict): Summary of execution results and performance.
        final_portfolio_state (Dict, optional): Final state of portfolio positions.
    """
    success: bool
    strategy_signals: Dict[StrategyType, Any]
    consolidated_portfolio: Dict[str, float]
    orders_executed: List[Dict]
    account_info_before: Dict
    account_info_after: Dict
    execution_summary: Dict
    final_portfolio_state: Optional[Dict] = None
