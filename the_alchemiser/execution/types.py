"""Type definitions for the execution package."""

from dataclasses import (
    dataclass,
)  # TODO(PYDANTIC-MIGRATION): Evaluate converting MultiStrategyExecutionResult to Pydantic BaseModel (immutable) OR revert to ExecutionResult TypedDict if only a passive record. Add field type refinements for execution_summary/final_portfolio_state.
from typing import Any

from the_alchemiser.core.trading.strategy_manager import StrategyType
from the_alchemiser.core.types import AccountInfo, OrderDetails, StrategySignal


@dataclass
class MultiStrategyExecutionResult:
    """Result container for multi-strategy execution.

    Attributes:
        success (bool): Whether the execution completed successfully.
        strategy_signals (Dict[StrategyType, Any]): Signals generated by each strategy.
        consolidated_portfolio (Dict[str, float]): Final consolidated portfolio weights.
        orders_executed (List[Dict]): List of orders that were executed.
        account_info_before (Dict): Account information before execution.
        account_info_after (Dict): Account information after execution.
        execution_summary (Dict): Summary of execution results and performance.
        final_portfolio_state (Dict, optional): Final state of portfolio positions.
    """

    success: bool
    strategy_signals: dict[StrategyType, StrategySignal]
    consolidated_portfolio: dict[str, float]
    orders_executed: list[OrderDetails]
    account_info_before: AccountInfo
    account_info_after: AccountInfo
    execution_summary: dict[str, Any]  # Keep as Any for now, will define specific type later
    final_portfolio_state: dict[str, Any] | None = None
