#!/usr/bin/env python3
"""
Signal Display Utilities

This module provides helper functions for displaying and logging signal results
that are common across different strategy signal generators.
"""

from typing import Any

from the_alchemiser.core.alerts.alert_service import Alert
from the_alchemiser.core.logging.logging_utils import get_logger, log_trade_event


def display_signal_results(
    alerts: list[Alert], strategy_name: str = "Strategy", key_symbols: list[str] | None = None
) -> Alert | None:
    """
    Display signal results in a consistent format across different strategies.

    Args:
        alerts: List of Alert objects generated by strategy
        strategy_name: Name of the strategy (e.g., "TECL", "NUCLEAR")
        key_symbols: List of symbols to display technical indicators for

    Returns:
        First alert for compatibility, or None if no alerts
    """
    logger = get_logger(__name__)

    if not alerts or len(alerts) == 0:
        logger.warning("Unable to generate %s strategy signal", strategy_name)
        return None

    # Log all alerts
    from the_alchemiser.core.alerts.alert_service import log_alert_to_file

    for alert in alerts:
        log_alert_to_file(alert)
        # Log trade event for structured logging
        log_trade_event(
            logger,
            "signal_generated",
            alert.symbol,
            strategy=strategy_name,
            action=alert.action,
            price=alert.price,
            reason=alert.reason,
        )

    # Log results based on number of alerts
    if len(alerts) > 1:
        # Multi-asset portfolio signal
        logger.info(
            "%s portfolio signal generated with %d assets allocated",
            strategy_name.upper(),
            len(alerts),
        )
        for alert in alerts:
            if alert.action != "HOLD":
                logger.info(
                    "%s %s at $%.2f - %s", alert.action, alert.symbol, alert.price, alert.reason
                )
    else:
        # Single signal
        alert = alerts[0]
        if alert.action != "HOLD":
            logger.info(
                "%s trading signal: %s %s at $%.2f - %s",
                strategy_name.upper(),
                alert.action,
                alert.symbol,
                alert.price,
                alert.reason,
            )
        else:
            print(
                f"ðŸ“Š {strategy_name} Analysis: {alert.action} {alert.symbol} at ${alert.price:.2f}"
            )
            print(f"   Reason: {alert.reason}")

    return alerts[0]  # Return first alert for compatibility


def display_technical_indicators(
    strategy_instance: Any, key_symbols: list[str] | None = None
) -> None:
    """
    Display technical indicators used for signal generation.

    Args:
        strategy_instance: Strategy instance with get_market_data and calculate_indicators methods
        key_symbols: List of symbols to display indicators for
    """
    logger = get_logger(__name__)

    if not key_symbols:
        return

    try:
        if hasattr(strategy_instance, "calculate_indicators"):
            market_data = strategy_instance.get_market_data()
            indicators = strategy_instance.calculate_indicators(market_data)
            logger.info("Technical indicators for signal generation:")
            for symbol in key_symbols:
                if symbol in indicators:
                    rsi_10 = indicators[symbol].get("rsi_10")
                    rsi_20 = indicators[symbol].get("rsi_20")
                    if rsi_10 is not None and rsi_20 is not None:
                        logger.info("%s: RSI(10)=%.1f, RSI(20)=%.1f", symbol, rsi_10, rsi_20)
                    else:
                        logger.debug("%s: RSI indicators not available", symbol)
    except (AttributeError, KeyError, ValueError, TypeError, ImportError) as e:
        logger.warning("Could not display technical indicators: %s", e)


def display_portfolio_details(strategy_instance: Any, strategy_name: str = "Strategy") -> None:
    """
    Display portfolio allocation details if available.

    Args:
        strategy_instance: Strategy instance with get_current_portfolio_allocation method
        strategy_name: Name of the strategy
    """
    logger = get_logger(__name__)

    try:
        if hasattr(strategy_instance, "get_current_portfolio_allocation"):
            portfolio = strategy_instance.get_current_portfolio_allocation()
            if portfolio:
                logger.info("%s portfolio details:", strategy_name.upper())
                for symbol, data in portfolio.items():
                    weight = data.get("weight", 0)
                    if isinstance(weight, int | float):
                        logger.info("   %s: %.1%", symbol, weight)
                    else:
                        logger.info("   %s: %s", symbol, weight)
    except (AttributeError, KeyError, ValueError, TypeError, ImportError) as e:
        logger.warning("Could not display portfolio details: %s", e)
