#!/usr/bin/env python3
"""
Signal Display Utilities

This module provides helper functions for displaying and logging signal results
that are common across different strategy signal generators.
"""

import logging


def display_signal_results(alerts, strategy_name="Strategy", key_symbols=None):
    """
    Display signal results in a consistent format across different strategies.
    
    Args:
        alerts: List of Alert objects generated by strategy
        strategy_name: Name of the strategy (e.g., "TECL", "NUCLEAR")
        key_symbols: List of symbols to display technical indicators for
        
    Returns:
        First alert for compatibility, or None if no alerts
    """
    if not alerts or len(alerts) == 0:
        print(f"❌ Unable to generate {strategy_name} strategy signal")
        return None
    
    # Log all alerts
    from the_alchemiser.core.alerts.alert_service import log_alert_to_file
    for alert in alerts:
        log_alert_to_file(alert)
    
    # Display results based on number of alerts
    if len(alerts) > 1:
        # Multi-asset portfolio signal
        print(f"🚨 {strategy_name.upper()} PORTFOLIO SIGNAL: {len(alerts)} assets allocated")
        print(f"\n🔵 {strategy_name.upper()} PORTFOLIO ALLOCATION:")
        for alert in alerts:
            if alert.action != 'HOLD':
                print(f"   🟢 {alert.action} {alert.symbol} at ${alert.price:.2f}")
                print(f"      Reason: {alert.reason}")
            else:
                print(f"   ⚪ {alert.action} {alert.symbol} at ${alert.price:.2f}")
                print(f"      Reason: {alert.reason}")
    else:
        # Single signal
        alert = alerts[0]
        if alert.action != 'HOLD':
            print(f"🚨 {strategy_name.upper()} TRADING SIGNAL: {alert.action} {alert.symbol} at ${alert.price:.2f}")
            print(f"   Reason: {alert.reason}")
        else:
            print(f"📊 {strategy_name} Analysis: {alert.action} {alert.symbol} at ${alert.price:.2f}")
            print(f"   Reason: {alert.reason}")
    
    return alerts[0]  # Return first alert for compatibility


def display_technical_indicators(strategy_instance, key_symbols=None):
    """
    Display technical indicators used for signal generation.
    
    Args:
        strategy_instance: Strategy instance with get_market_data and calculate_indicators methods
        key_symbols: List of symbols to display indicators for
    """
    if not key_symbols:
        return
        
    try:
        if hasattr(strategy_instance, 'calculate_indicators'):
            market_data = strategy_instance.get_market_data()
            indicators = strategy_instance.calculate_indicators(market_data)
            logging.info("\n🔬 Technical Indicators Used for Signal Generation:")
            for symbol in key_symbols:
                if symbol in indicators:
                    rsi_10 = indicators[symbol].get('rsi_10')
                    rsi_20 = indicators[symbol].get('rsi_20')
                    if rsi_10 is not None and rsi_20 is not None:
                        logging.info(f"  {symbol}: RSI(10)={rsi_10:.1f}, RSI(20)={rsi_20:.1f}")
                    else:
                        logging.info(f"  {symbol}: RSI indicators not available")
    except Exception as e:
        logging.warning(f"Could not display technical indicators: {e}")


def display_portfolio_details(strategy_instance, strategy_name="Strategy"):
    """
    Display portfolio allocation details if available.
    
    Args:
        strategy_instance: Strategy instance with get_current_portfolio_allocation method
        strategy_name: Name of the strategy
    """
    try:
        if hasattr(strategy_instance, 'get_current_portfolio_allocation'):
            portfolio = strategy_instance.get_current_portfolio_allocation()
            if portfolio:
                logging.info(f"{strategy_name.upper()} PORTFOLIO DETAILS:")
                for symbol, data in portfolio.items():
                    weight = data.get('weight', 0)
                    if isinstance(weight, (int, float)):
                        logging.info(f"   {symbol}: {weight:.1%}")
                    else:
                        logging.info(f"   {symbol}: {weight}")
    except Exception as e:
        logging.warning(f"Could not display portfolio details: {e}")
