[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "the-alchemiser"
version = "2.14.0"
description = "Advanced Multi-Strategy Quantitative Trading System with Nuclear and TECL strategies"
readme = "README.md"
authors = ["Josh Moreton <josh@example.com>"]
license = "MIT"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
packages = [{include = "the_alchemiser"}]
include = [
    { path = "the_alchemiser/config/*.json", format = "sdist" },
    { path = "the_alchemiser/config/*.json", format = "wheel" }
]

[tool.poetry.dependencies]
python = ">=3.12,<4.0.0"
alpaca-py = "0.42.2"
numpy = "1.26.4"
pandas = "2.3.3"
python-dateutil = "2.9.0.post0"
tqdm = "4.67.1"
setuptools = "80.9.0"
requests = "2.32.5"
PyYAML = "6.0.3"
pydantic = ">=2.0.0"
pydantic-settings = ">=2.0.0"
cachetools = "^6.1.0"
dependency-injector = "^4.48.2"
python-dotenv = "^1.1.1"
structlog = "^25.4.0"
pyarrow = "^21.0.0"

[tool.poetry.group.dev.dependencies]
ruff = ">=0.1.0"
mypy = ">=1.0.0"
pre-commit = "^4.3.0"
types-PyYAML = ">=6.0.0"
types-requests = ">=2.31.0"
types-pytz = ">=2023.3.0"
bandit = ">=1.7.0"  # Legacy direct usage; Ruff "S" rules supplement
vulture = "^2.14"   # Dead code detection
psutil = "^7.1.0"
pydocstyle = ">=6.0.0"  # Docstring style (Ruff D rules)
pytest = "^8.4.2"
pytest-cov = "^7.0.0"  # Coverage reporting for SonarCloud
pip-audit = "^2.7.3"  # Dependency vulnerability scanning
detect-secrets = "^1.5.0"  # Secret scanning (baseline optional)
pyright = "^1.1.406"  # Supplemental static type analysis (optional CI/nightly)
import-linter = "^2.5"  # Module dependency enforcement
pytest-asyncio = "^1.2.0"
hypothesis = "^6.140.3"



[tool.poetry.urls]
Homepage = "https://github.com/Josh-moreton/The-Alchemiser"
Repository = "https://github.com/Josh-moreton/The-Alchemiser"
Issues = "https://github.com/Josh-moreton/The-Alchemiser/issues"

[tool.ruff]
target-version = "py312"
line-length = 100
extend-exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "tests",
]

[tool.ruff.lint]
select = [
    "E","F","I",
    "UP",
    "B","C4","SIM",
    "PTH","DTZ","Q",
    "PIE","RET","FBT",
    "ANN",
    "D",
    "S",
    "RUF",
    "C901"  # McCabe complexity
]
ignore = [
    "E501",
    "B008",
    "B904",
    # Docstring rule conflicts (prefer D211, D212)
    "D203",
    "D213",
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.mccabe]
max-complexity = 15  # SonarQube compatibility

[tool.ruff.lint.isort]
known-first-party = ["the_alchemiser"]

[tool.mypy]
python_version = "3.12"
strict = true
plugins = ["pydantic.mypy"]
files = ["the_alchemiser"]
show_error_codes = true
pretty = true
color_output = true
cache_dir = ".mypy_cache"

# Progressive type checking for migration
# Focus on new modular structure with strict enforcement
# Legacy code excluded until migration complete
exclude = [
    # Legacy DDD structure - exclude until migration complete
    "the_alchemiser/application/",
    "the_alchemiser/domain/",
    "the_alchemiser/infrastructure/config/execution_config.py",
    "the_alchemiser/services/",
    "the_alchemiser/utils/",
    # Exclude problematic legacy files
    "the_alchemiser/.*_backup/",
    "the_alchemiser/.*/.*original.*",
    # Exclude tests from type checking
    "tests/",
]

# Retain targeted ignores for third-party libs lacking type hints
[[tool.mypy.overrides]]
module = [
    "alpaca.*",
    "boto3.*",
    "botocore.*",
    "pandas.*",
    "numpy.*",
    "tqdm.*",
    "yaml.*"
]
ignore_missing_imports = true

[tool.importlinter]
root_package = "the_alchemiser"

# Progressive enforcement: Start with basic rules and add stricter ones as migration progresses
[[tool.importlinter.contracts]]
name = "Shared module isolation - prevent upward dependencies"
type = "forbidden"
source_modules = [
    "the_alchemiser.shared"
]
forbidden_modules = [
    "the_alchemiser.strategy_v2",
    "the_alchemiser.portfolio_v2",
    "the_alchemiser.execution_v2",
    "the_alchemiser.orchestration"
]

# Business module isolation - prevent cross-imports between business domains
[[tool.importlinter.contracts]]
name = "Strategy module isolation"
type = "forbidden"
source_modules = [
    "the_alchemiser.strategy_v2"
]
forbidden_modules = [
    "the_alchemiser.portfolio_v2",
    "the_alchemiser.execution_v2",
    "the_alchemiser.orchestration"
]

[[tool.importlinter.contracts]]
name = "Portfolio module isolation"
type = "forbidden"
source_modules = [
    "the_alchemiser.portfolio_v2"
]
forbidden_modules = [
    "the_alchemiser.strategy_v2",
    "the_alchemiser.execution_v2",
    "the_alchemiser.orchestration"
]

[[tool.importlinter.contracts]]
name = "Execution module isolation"
type = "forbidden"
source_modules = [
    "the_alchemiser.execution_v2"
]
forbidden_modules = [
    "the_alchemiser.strategy_v2",
    "the_alchemiser.portfolio_v2",
    "the_alchemiser.orchestration"
]

# Layered architecture: each layer can only import from layers below it
# Layer 1 (bottom): shared - no dependencies on application modules
# Layer 2 (middle): business modules - can import shared only
# Layer 3 (top): orchestration - can import business modules + shared
[[tool.importlinter.contracts]]
name = "Event-driven layered architecture enforcement"
type = "layers"
layers = [
    "the_alchemiser.orchestration",
    "the_alchemiser.strategy_v2 | the_alchemiser.portfolio_v2 | the_alchemiser.execution_v2",
    "the_alchemiser.shared"
]

# Forbid deprecated DTO imports - use shared.schemas instead
[[tool.importlinter.contracts]]
name = "Deprecated DTO module forbidden"
type = "forbidden"
source_modules = [
    "the_alchemiser"
]
forbidden_modules = [
    "the_alchemiser.shared.dto"
]
