#!/usr/bin/env python3
"""
iCloud Email Setup Helper for The Alchemiser

This script helps you quickly configure iCloud email notifications for The Alchemiser.
It will guide you through the process and create the necessary environment variables.
"""

import os
import sys
import getpass
from pathlib import Path

def setup_icloud_email():
    """Interactive setup for iCloud email configuration"""
    print("üçé iCloud Email Setup for The Alchemiser")
    print("=" * 50)
    
    print("\nüìù This script will help you configure iCloud email notifications.")
    print("Before continuing, make sure you have:")
    print("   ‚úÖ 2-Factor Authentication enabled on your Apple ID")
    print("   ‚úÖ Generated an app-specific password at appleid.apple.com")
    print("\nüí° To generate an app-specific password:")
    print("   1. Go to https://appleid.apple.com")
    print("   2. Sign in with your Apple ID")
    print("   3. In Security section, click 'Generate Password' under 'App-Specific Passwords'")
    print("   4. Enter label: 'Alchemiser Trading Bot'")
    print("   5. Copy the generated password (format: xxxx-xxxx-xxxx-xxxx)")
    
    print("\n" + "="*50)
    
    # Get user inputs
    email_address = input("\nüìß Enter your iCloud email address (@icloud.com, @me.com, or @mac.com): ").strip()
    
    if not email_address:
        print("‚ùå Email address is required")
        return False
    
    if not any(domain in email_address for domain in ['@icloud.com', '@me.com', '@mac.com']):
        print("‚ö†Ô∏è  Warning: This doesn't look like an iCloud email address")
        print("   Expected domains: @icloud.com, @me.com, or @mac.com")
        continue_anyway = input("   Continue anyway? (y/N): ").strip().lower()
        if continue_anyway != 'y':
            return False
    
    print("\nüîë Enter your app-specific password:")
    print("   (This should be the 16-character password generated at appleid.apple.com)")
    print("   (Format: xxxx-xxxx-xxxx-xxxx)")
    app_password = getpass.getpass("   App-specific password: ").strip()
    
    if not app_password:
        print("‚ùå App-specific password is required")
        return False
    
    # Normalize password format (remove spaces and dashes for storage)
    app_password = app_password.replace('-', '').replace(' ', '')
    if len(app_password) != 16:
        print(f"‚ö†Ô∏è  Warning: App-specific password should be 16 characters, got {len(app_password)}")
        print("   Make sure you copied the full password from Apple ID settings")
        continue_anyway = input("   Continue anyway? (y/N): ").strip().lower()
        if continue_anyway != 'y':
            return False
    
    recipient_email = input(f"\nüì¨ Enter recipient email (press Enter to use {email_address}): ").strip()
    if not recipient_email:
        recipient_email = email_address
    
    # Create environment variables
    env_vars = {
        'SMTP_SERVER': 'smtp.mail.me.com',
        'SMTP_PORT': '587',
        'EMAIL_ADDRESS': email_address,
        'EMAIL_PASSWORD': app_password,
        'RECIPIENT_EMAIL': recipient_email
    }
    
    print("\nüìã Configuration Summary:")
    print(f"   SMTP Server: {env_vars['SMTP_SERVER']}")
    print(f"   SMTP Port: {env_vars['SMTP_PORT']}")
    print(f"   From Email: {env_vars['EMAIL_ADDRESS']}")
    print(f"   To Email: {env_vars['RECIPIENT_EMAIL']}")
    print(f"   Password: {'*' * len(app_password)} (hidden)")
    
    confirm = input("\n‚úÖ Does this look correct? (y/N): ").strip().lower()
    if confirm != 'y':
        print("‚ùå Setup cancelled")
        return False
    
    # Create .env file option
    create_env_file = input("\nüíæ Create .env file for easy loading? (y/N): ").strip().lower()
    
    if create_env_file == 'y':
        env_file_path = Path.cwd() / '.env'
        
        # Read existing .env if it exists
        existing_vars = {}
        if env_file_path.exists():
            with open(env_file_path, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        existing_vars[key] = value
        
        # Update with new email variables
        existing_vars.update(env_vars)
        
        # Write .env file
        with open(env_file_path, 'w') as f:
            f.write("# The Alchemiser Environment Variables\n")
            f.write("# Generated by iCloud email setup\n\n")
            
            # Email configuration
            f.write("# Email Configuration (iCloud)\n")
            for key, value in env_vars.items():
                f.write(f"{key}={value}\n")
            
            # Write other existing variables
            other_vars = {k: v for k, v in existing_vars.items() if k not in env_vars}
            if other_vars:
                f.write("\n# Other Configuration\n")
                for key, value in other_vars.items():
                    f.write(f"{key}={value}\n")
        
        print(f"‚úÖ Created .env file at {env_file_path}")
        print("\nüìñ To use the .env file, you can:")
        print("   1. Load manually: source .env")
        print("   2. Use with python-dotenv: from dotenv import load_dotenv; load_dotenv()")
    
    # Export instructions
    print(f"\nüîß To set environment variables manually, run these commands:")
    print("export SMTP_SERVER='smtp.mail.me.com'")
    print(f"export SMTP_PORT='587'")
    print(f"export EMAIL_ADDRESS='{email_address}'")
    print(f"export EMAIL_PASSWORD='{app_password}'")
    print(f"export RECIPIENT_EMAIL='{recipient_email}'")
    
    print(f"\nüß™ Test your configuration by running:")
    print("   python scripts/test_email_setup.py")
    
    print(f"\n‚úÖ iCloud email configuration completed!")
    return True


def main():
    """Main function"""
    try:
        success = setup_icloud_email()
        if success:
            print("\nüéâ Setup completed successfully!")
            print("Your iCloud email notifications are ready for The Alchemiser!")
        else:
            print("\n‚ùå Setup was not completed")
            print("Please run the script again or refer to EMAIL_SETUP.md for manual configuration")
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled by user")
    except Exception as e:
        print(f"\n‚ùå Setup failed with error: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
